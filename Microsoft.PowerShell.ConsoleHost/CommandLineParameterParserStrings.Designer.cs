//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.PowerShell {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class CommandLineParameterParserStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CommandLineParameterParserStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.PowerShell.CommandLineParameterParserStrings", typeof(CommandLineParameterParserStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process the command because arguments to -Command or -EncodedCommand have already been specified with -EncodedArguments..
        /// </summary>
        internal static string ArgsAlreadySpecified {
            get {
                return ResourceManager.GetString("ArgsAlreadySpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument &apos;{0}&apos; to the -File parameter does not exist. Provide the path to an existing &apos;.ps1&apos; file as an argument to the -File parameter..
        /// </summary>
        internal static string ArgumentFileDoesNotExist {
            get {
                return ResourceManager.GetString("ArgumentFileDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process the command because the value specified with -EncodedArguments is not properly encoded. The value must be Base64 encoded..
        /// </summary>
        internal static string BadArgsValue {
            get {
                return ResourceManager.GetString("BadArgsValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process the command because the value specified with -EncodedCommand is not properly encoded. The value must be Base64 encoded..
        /// </summary>
        internal static string BadCommandValue {
            get {
                return ResourceManager.GetString("BadCommandValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process the command because of an incorrect parameter value. &quot;{0}&quot; is not a valid format.  Valid formats are:
        ///{1}.
        /// </summary>
        internal static string BadFormatParameterValue {
            get {
                return ResourceManager.GetString("BadFormatParameterValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to read from file &apos;{0}&apos;..
        /// </summary>
        internal static string CannotReadFile {
            get {
                return ResourceManager.GetString("CannotReadFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process command because a command is already specified with -Command or -EncodedCommand..
        /// </summary>
        internal static string CommandAlreadySpecified {
            get {
                return ResourceManager.GetString("CommandAlreadySpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PowerShell[.exe] [-PSConsoleFile &lt;file&gt; | -Version &lt;version&gt;]
        ///    [-NoLogo] [-NoExit] [-NoProfile] [-NonInteractive] [-STA]
        ///    [-OutputFormat {Text | XML}] [-InputFormat {Text | XML}]
        ///    [-Command { - | &lt;script-block&gt; [-args &lt;arg-array&gt;]
        ///                  | &lt;string&gt; [&lt;CommandParameters&gt;] } ]
        ///    [-File fileName [arguments...]] [-ExecutionPolicy &lt;ExecutionPolicy&gt;]
        ///
        ///PowerShell[.exe] -Help | -? | /?
        ///
        ///
        ///-PSConsoleFile
        ///    Loads the specified Windows PowerShell console file. To create a console
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DefaultHelp {
            get {
                return ResourceManager.GetString("DefaultHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Processing -File &apos;{0}&apos; failed: {1} Specify a valid path for the -File parameter..
        /// </summary>
        internal static string InvalidFileArgument {
            get {
                return ResourceManager.GetString("InvalidFileArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Processing -File &apos;{0}&apos; failed because the file does not have a &apos;.ps1&apos; extension. Specify a valid Windows PowerShell script file name, and then try again..
        /// </summary>
        internal static string InvalidFileArgumentExtension {
            get {
                return ResourceManager.GetString("InvalidFileArgumentExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Processing -WindowStyle &apos;{0}&apos; failed: {1}..
        /// </summary>
        internal static string InvalidWindowStyleArgument {
            get {
                return ResourceManager.GetString("InvalidWindowStyleArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process the command because -EncodedArguments requires a value. Specify a value for the -EncodedArguments parameter..
        /// </summary>
        internal static string MissingArgsValue {
            get {
                return ResourceManager.GetString("MissingArgsValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process the command because of a missing parameter. A command must follow -Command..
        /// </summary>
        internal static string MissingCommandParameter {
            get {
                return ResourceManager.GetString("MissingCommandParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process the execution policy because of a missing policy name. A policy name must follow -ExecutionPolicy..
        /// </summary>
        internal static string MissingExecutionPolicyParameter {
            get {
                return ResourceManager.GetString("MissingExecutionPolicyParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command cannot be run because the File parameter requires a file path. Supply a path for the File parameter and then try the command again..
        /// </summary>
        internal static string MissingFileArgument {
            get {
                return ResourceManager.GetString("MissingFileArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process the command because the -InputFormat parameter requires an argument. Specify a valid format argument for this parameter.  Valid formats are:
        ///{0}.
        /// </summary>
        internal static string MissingInputFormatParameter {
            get {
                return ResourceManager.GetString("MissingInputFormatParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command cannot be run because no argument has been supplied for the OutputFormat parameter. Specify one of the following formats for this parameter.
        ///{0}.
        /// </summary>
        internal static string MissingOutputFormatParameter {
            get {
                return ResourceManager.GetString("MissingOutputFormatParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process the command because -WindowStyle requires an argument that is normal, hidden, minimized or maximized. Specify one of these argument values and try again..
        /// </summary>
        internal static string MissingWindowStyleArgument {
            get {
                return ResourceManager.GetString("MissingWindowStyleArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process the command because -STA and -MTA are both specified. Specify either -STA or -MTA..
        /// </summary>
        internal static string MtaStaMutuallyExclusive {
            get {
                return ResourceManager.GetString("MtaStaMutuallyExclusive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;-&apos; was specified as the argument to -Command but standard input has not been redirected for this process..
        /// </summary>
        internal static string StdinNotRedirected {
            get {
                return ResourceManager.GetString("StdinNotRedirected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;-&apos; was specified with the -Command parameter; no other arguments to -Command are permitted..
        /// </summary>
        internal static string TooManyParametersToCommand {
            get {
                return ResourceManager.GetString("TooManyParametersToCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized parameter: &apos;{0}&apos;..
        /// </summary>
        internal static string UnknownParameter {
            get {
                return ResourceManager.GetString("UnknownParameter", resourceCulture);
            }
        }
    }
}
