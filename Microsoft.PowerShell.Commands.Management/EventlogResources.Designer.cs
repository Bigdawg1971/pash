//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.PowerShell.Commands.Management {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class EventlogResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal EventlogResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.PowerShell.Commands.Management.EventlogResources", typeof(EventlogResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The registry key for the log &quot;{0}&quot; for source &quot;{2}&quot; could not be opened..
        /// </summary>
        public static string AccessDenied {
            get {
                return ResourceManager.GetString("AccessDenied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access is denied. Try running the command again in a session that has been opened with elevated user rights (that is, Run as Administrator)..
        /// </summary>
        public static string AccessIsDenied {
            get {
                return ResourceManager.GetString("AccessIsDenied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to clear the &quot;{0}&quot; log on the computer &quot;{1}&quot;?.
        /// </summary>
        public static string ClearEventLogWarning {
            get {
                return ResourceManager.GetString("ClearEventLogWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify a valid value for the number of retention days..
        /// </summary>
        public static string InvalidArgument {
            get {
                return ResourceManager.GetString("InvalidArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Retention days is valid only if the overflow action is &quot;OverwriteOlder&quot;. Please change  and try again..
        /// </summary>
        public static string InvalidOverflowAction {
            get {
                return ResourceManager.GetString("InvalidOverflowAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to change the properties of the &quot;{0}&quot; log on the &quot;{1}&quot; computer?.
        /// </summary>
        public static string LimitEventLogWarning {
            get {
                return ResourceManager.GetString("LimitEventLogWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Log name &quot;{0}&quot; does not exist in the computer &quot;{1}&quot;..
        /// </summary>
        public static string LogDoesNotExist {
            get {
                return ResourceManager.GetString("LogDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log &quot;{0}&quot; could not be read to completion due to the following error. This may have occurred because the log was cleared while still being read. {1}.
        /// </summary>
        public static string LogReadError {
            get {
                return ResourceManager.GetString("LogReadError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to the &quot;{1}&quot; computer is denied..
        /// </summary>
        public static string NoAccess {
            get {
                return ResourceManager.GetString("NoAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No matches found.
        /// </summary>
        public static string NoEntriesFound {
            get {
                return ResourceManager.GetString("NoEntriesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command is not supported in this version of the operating system..
        /// </summary>
        public static string NotSupported {
            get {
                return ResourceManager.GetString("NotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operating system reported an error when writing the event entry to the event log. A Windows error code is not available..
        /// </summary>
        public static string OSWritingError {
            get {
                return ResourceManager.GetString("OSWritingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to the &quot;{1}&quot; computer cannot be found..
        /// </summary>
        public static string PathDoesNotExist {
            get {
                return ResourceManager.GetString("PathDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The registry key for the log &quot;{0}&quot; could not be opened on the computer &quot;{1}&quot;..
        /// </summary>
        public static string PermissionDenied {
            get {
                return ResourceManager.GetString("PermissionDenied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to remove the &quot;{0}&quot; log from the &quot;{1}&quot; computer?.
        /// </summary>
        public static string RemoveEventLogWarning {
            get {
                return ResourceManager.GetString("RemoveEventLogWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to remove the &quot;{0}&quot; source from the &quot;{1}&quot; computer?.
        /// </summary>
        public static string RemoveSourceWarning {
            get {
                return ResourceManager.GetString("RemoveSourceWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source name &quot;{2}&quot; does not exist on computer &quot;{1}&quot;..
        /// </summary>
        public static string SourceDoesNotExist {
            get {
                return ResourceManager.GetString("SourceDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;{2}&quot; source is already registered on the &quot;{1}&quot; computer..
        /// </summary>
        public static string SourceExistInComp {
            get {
                return ResourceManager.GetString("SourceExistInComp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;{2}&quot; source is already registered with the &quot;{0}&quot; log..
        /// </summary>
        public static string SourceExistWithLog {
            get {
                return ResourceManager.GetString("SourceExistWithLog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value supplied for MaximumSize parameter has to be in the range of 64 KB to 4GB with an increment of 64 KB. Please enter a proper value and then retry..
        /// </summary>
        public static string ValueOutofRange {
            get {
                return ResourceManager.GetString("ValueOutofRange", resourceCulture);
            }
        }
    }
}
