using Microsoft.CSharp;
using Microsoft.PowerShell.Commands.Management;
using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Management.Automation;
using System.Net;
using System.Reflection;
using System.Text;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Discovery;
using System.Xml.Serialization;

namespace Microsoft.PowerShell.Commands
{
	[Cmdlet("New", "WebServiceProxy", DefaultParameterSetName="NoCredentials", HelpUri="http://go.microsoft.com/fwlink/?LinkID=135238")]
	public sealed class NewWebServiceProxy : PSCmdlet
	{
		private Uri _uri;

		private string _class;

		private string _namespace;

		private PSCredential _credential;

		private SwitchParameter _usedefaultcredential;

		private static Dictionary<Uri, string> UriCache;

		private static Dictionary<int, object> srccodeCache;

		private int sourceHash;

		private object cachelock;

		private static Random rnd;

		private static ulong sequenceNumber;

		private static object sequenceNumberLock;

		[Alias(new string[] { "FileName", "FN" })]
		[Parameter(Position=1)]
		[ValidateNotNullOrEmpty]
		public string Class
		{
			get
			{
				return this._class;
			}
			set
			{
				this._class = value;
			}
		}

		[Alias(new string[] { "Cred" })]
		[Credential]
		[Parameter(ParameterSetName="Credential")]
		[ValidateNotNullOrEmpty]
		public PSCredential Credential
		{
			get
			{
				return this._credential;
			}
			set
			{
				this._credential = value;
			}
		}

		[Alias(new string[] { "NS" })]
		[Parameter(Position=2)]
		[ValidateNotNullOrEmpty]
		public string Namespace
		{
			get
			{
				return this._namespace;
			}
			set
			{
				this._namespace = value;
			}
		}

		[Alias(new string[] { "WL", "WSDL", "Path" })]
		[Parameter(Mandatory=true, Position=0)]
		[ValidateNotNullOrEmpty]
		public Uri Uri
		{
			get
			{
				return this._uri;
			}
			set
			{
				this._uri = value;
			}
		}

		[Alias(new string[] { "UDC" })]
		[Parameter(ParameterSetName="UseDefaultCredential")]
		[ValidateNotNull]
		public SwitchParameter UseDefaultCredential
		{
			get
			{
				return this._usedefaultcredential;
			}
			set
			{
				this._usedefaultcredential = value;
			}
		}

		static NewWebServiceProxy()
		{
			NewWebServiceProxy.UriCache = new Dictionary<Uri, string>();
			NewWebServiceProxy.srccodeCache = new Dictionary<int, object>();
			NewWebServiceProxy.rnd = new Random();
			NewWebServiceProxy.sequenceNumber = (long)1;
			NewWebServiceProxy.sequenceNumberLock = new object();
		}

		public NewWebServiceProxy()
		{
			this.cachelock = new object();
		}

		protected override void BeginProcessing()
		{
			string str = null;
			if (this._uri.ToString().Trim().Length == 0)
			{
				Exception argumentException = new ArgumentException(WebServiceResources.InvalidUri);
				ErrorRecord errorRecord = new ErrorRecord(argumentException, "ArgumentException", ErrorCategory.InvalidOperation, null);
				base.ThrowTerminatingError(errorRecord);
			}
			string str1 = "System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
			try
			{
				Assembly.Load(str1);
			}
			catch (FileNotFoundException fileNotFoundException1)
			{
				FileNotFoundException fileNotFoundException = fileNotFoundException1;
				ErrorRecord errorDetail = new ErrorRecord(fileNotFoundException, "SystemWebAssemblyNotFound", ErrorCategory.ObjectNotFound, null);
				errorDetail.ErrorDetails = new ErrorDetails(WebServiceResources.NotSupported);
				base.ThrowTerminatingError(errorDetail);
			}
			int num = 0;
			lock (NewWebServiceProxy.UriCache)
			{
				if (NewWebServiceProxy.UriCache.ContainsKey(this._uri))
				{
					NewWebServiceProxy.UriCache.TryGetValue(this._uri, out str);
					char[] chrArray = new char[1];
					chrArray[0] = '|';
					string[] strArrays = str.Split(chrArray);
					if (string.IsNullOrEmpty(this._namespace) && strArrays[0].StartsWith("Microsoft.PowerShell.Commands.NewWebserviceProxy.AutogeneratedTypes.", StringComparison.OrdinalIgnoreCase))
					{
						this._namespace = strArrays[0];
						this._class = strArrays[1];
					}
					num = int.Parse(strArrays[2].ToString(), CultureInfo.InvariantCulture);
				}
			}
			if (string.IsNullOrEmpty(this._namespace))
			{
				this._namespace = string.Concat("Microsoft.PowerShell.Commands.NewWebserviceProxy.AutogeneratedTypes.WebServiceProxy", this.GenerateRandomName());
			}
			if (string.IsNullOrEmpty(this._class))
			{
				this._class = string.Concat("MyClass", this.GenerateRandomName());
			}
			Assembly assembly = this.GenerateWebServiceProxyAssembly(this._namespace, this._class);
			if (assembly != null)
			{
				object obj = this.InstantinateWebServiceProxy(assembly);
				PropertyInfo[] properties = obj.GetType().GetProperties();
				PropertyInfo[] propertyInfoArray = properties;
				for (int i = 0; i < (int)propertyInfoArray.Length; i++)
				{
					PropertyInfo propertyInfo = propertyInfoArray[i];
					if (propertyInfo.Name.Equals("UseDefaultCredentials", StringComparison.OrdinalIgnoreCase))
					{
						SwitchParameter useDefaultCredential = this.UseDefaultCredential;
						if (useDefaultCredential.IsPresent)
						{
							bool flag = true;
							propertyInfo.SetValue(obj, flag, null);
						}
					}
					if (propertyInfo.Name.Equals("Credentials", StringComparison.OrdinalIgnoreCase) && this.Credential != null)
					{
						NetworkCredential networkCredential = this.Credential.GetNetworkCredential();
						propertyInfo.SetValue(obj, networkCredential, null);
					}
				}
				lock (NewWebServiceProxy.UriCache)
				{
					if (NewWebServiceProxy.UriCache.ContainsKey(this._uri))
					{
						NewWebServiceProxy.UriCache.Remove(this._uri);
					}
				}
				if (num > 0)
				{
					lock (this.cachelock)
					{
						if (NewWebServiceProxy.srccodeCache.ContainsKey(num))
						{
							NewWebServiceProxy.srccodeCache.Remove(num);
						}
					}
				}
				string[] strArrays1 = new string[3];
				strArrays1[0] = this._namespace;
				strArrays1[1] = this._class;
				strArrays1[2] = this.sourceHash.ToString(CultureInfo.InvariantCulture);
				string str2 = string.Join("|", strArrays1);
				lock (NewWebServiceProxy.UriCache)
				{
					NewWebServiceProxy.UriCache.Add(this._uri, str2);
				}
				lock (this.cachelock)
				{
					NewWebServiceProxy.srccodeCache.Add(this.sourceHash, obj);
				}
				base.WriteObject(obj, true);
				return;
			}
			else
			{
				return;
			}
		}

		private string GenerateRandomName()
		{
			string str;
			string str1 = null;
			string str2 = this._uri.ToString();
			for (int i = 0; i < str2.Length; i++)
			{
				int num = Convert.ToInt32(str2[i], CultureInfo.InvariantCulture);
				if ((num < 65 || num > 90) && (num < 48 || num > 57) && (num < 97 || num > 122))
				{
					str1 = string.Concat(str1, "_");
				}
				else
				{
					str1 = string.Concat(str1, str2[i]);
				}
			}
			lock (NewWebServiceProxy.sequenceNumberLock)
			{
				ulong num1 = NewWebServiceProxy.sequenceNumber;
				NewWebServiceProxy.sequenceNumber = num1 + (long)1;
				ulong num2 = num1;
				str = num2.ToString(CultureInfo.InvariantCulture);
			}
			if (str1.Length <= 30)
			{
				return string.Concat(str, str1);
			}
			else
			{
				return string.Concat(str, str1.Substring(str1.Length - 30));
			}
		}

		private Assembly GenerateWebServiceProxyAssembly(string NameSpace, string ClassName)
		{
			object obj = null;
			Assembly assembly;
			DiscoveryClientProtocol discoveryClientProtocol = new DiscoveryClientProtocol();
			if (this._usedefaultcredential.IsPresent)
			{
				discoveryClientProtocol.UseDefaultCredentials = true;
			}
			if (base.ParameterSetName.Equals("Credential", StringComparison.OrdinalIgnoreCase))
			{
				discoveryClientProtocol.Credentials = this._credential.GetNetworkCredential();
			}
			try
			{
				discoveryClientProtocol.AllowAutoRedirect = true;
				discoveryClientProtocol.DiscoverAny(this._uri.ToString());
				discoveryClientProtocol.ResolveAll();
				goto Label0;
			}
			catch (WebException webException1)
			{
				WebException webException = webException1;
				ErrorRecord errorRecord = new ErrorRecord(webException, "WebException", ErrorCategory.ObjectNotFound, this._uri);
				if (webException.InnerException != null)
				{
					errorRecord.ErrorDetails = new ErrorDetails(webException.InnerException.Message);
				}
				base.WriteError(errorRecord);
				assembly = null;
			}
			catch (InvalidOperationException invalidOperationException1)
			{
				InvalidOperationException invalidOperationException = invalidOperationException1;
				ErrorRecord errorRecord1 = new ErrorRecord(invalidOperationException, "InvalidOperationException", ErrorCategory.InvalidOperation, this._uri);
				base.WriteError(errorRecord1);
				assembly = null;
			}
			return assembly;
		Label0:
			CodeNamespace codeNamespace = new CodeNamespace();
			if (!string.IsNullOrEmpty(NameSpace))
			{
				codeNamespace.Name = NameSpace;
			}
			if (!string.IsNullOrEmpty(ClassName))
			{
				CodeTypeDeclaration codeTypeDeclaration = new CodeTypeDeclaration(ClassName);
				codeTypeDeclaration.IsClass = true;
				codeTypeDeclaration.Attributes = MemberAttributes.Public;
				codeNamespace.Types.Add(codeTypeDeclaration);
			}
			WebReference webReference = new WebReference(discoveryClientProtocol.Documents, codeNamespace);
			WebReferenceCollection webReferenceCollection = new WebReferenceCollection();
			webReferenceCollection.Add(webReference);
			CodeCompileUnit codeCompileUnit = new CodeCompileUnit();
			codeCompileUnit.Namespaces.Add(codeNamespace);
			WebReferenceOptions webReferenceOption = new WebReferenceOptions();
			webReferenceOption.CodeGenerationOptions = CodeGenerationOptions.GenerateProperties | CodeGenerationOptions.GenerateNewAsync | CodeGenerationOptions.GenerateOldAsync;
			webReferenceOption.Verbose = true;
			CSharpCodeProvider cSharpCodeProvider = new CSharpCodeProvider();
			StringCollection stringCollections = ServiceDescriptionImporter.GenerateWebReferences(webReferenceCollection, cSharpCodeProvider, codeCompileUnit, webReferenceOption);
			StringBuilder stringBuilder = new StringBuilder();
			StringWriter stringWriter = new StringWriter(stringBuilder, CultureInfo.InvariantCulture);
			try
			{
				cSharpCodeProvider.GenerateCodeFromCompileUnit(codeCompileUnit, stringWriter, null);
			}
			catch (NotImplementedException notImplementedException1)
			{
				NotImplementedException notImplementedException = notImplementedException1;
				ErrorRecord errorRecord2 = new ErrorRecord(notImplementedException, "NotImplementedException", ErrorCategory.ObjectNotFound, this._uri);
				base.WriteError(errorRecord2);
			}
			this.sourceHash = stringBuilder.ToString().GetHashCode();
			if (!NewWebServiceProxy.srccodeCache.ContainsKey(this.sourceHash))
			{
				CompilerParameters compilerParameter = new CompilerParameters();
				CompilerResults compilerResult = null;
				foreach (string str in stringCollections)
				{
					base.WriteWarning(str);
				}
				compilerParameter.ReferencedAssemblies.Add("System.dll");
				compilerParameter.ReferencedAssemblies.Add("System.Data.dll");
				compilerParameter.ReferencedAssemblies.Add("System.Xml.dll");
				compilerParameter.ReferencedAssemblies.Add("System.Web.Services.dll");
				compilerParameter.ReferencedAssemblies.Add(Assembly.GetExecutingAssembly().Location);
				this.GetReferencedAssemblies(typeof(Cmdlet).Assembly, compilerParameter);
				compilerParameter.GenerateInMemory = true;
				compilerParameter.TreatWarningsAsErrors = false;
				compilerParameter.WarningLevel = 4;
				compilerParameter.GenerateExecutable = false;
				try
				{
					string[] strArrays = new string[1];
					strArrays[0] = stringBuilder.ToString();
					compilerResult = cSharpCodeProvider.CompileAssemblyFromSource(compilerParameter, strArrays);
				}
				catch (NotImplementedException notImplementedException3)
				{
					NotImplementedException notImplementedException2 = notImplementedException3;
					ErrorRecord errorRecord3 = new ErrorRecord(notImplementedException2, "NotImplementedException", ErrorCategory.ObjectNotFound, this._uri);
					base.WriteError(errorRecord3);
				}
				return compilerResult.CompiledAssembly;
			}
			else
			{
				NewWebServiceProxy.srccodeCache.TryGetValue(this.sourceHash, out obj);
				base.WriteObject(obj, true);
				return null;
			}
		}

		private void GetReferencedAssemblies(Assembly assembly, CompilerParameters parameters)
		{
			if (!parameters.ReferencedAssemblies.Contains(assembly.Location))
			{
				string fileName = Path.GetFileName(assembly.Location);
				if (!parameters.ReferencedAssemblies.Contains(fileName))
				{
					parameters.ReferencedAssemblies.Add(assembly.Location);
					AssemblyName[] referencedAssemblies = assembly.GetReferencedAssemblies();
					for (int i = 0; i < (int)referencedAssemblies.Length; i++)
					{
						AssemblyName assemblyName = referencedAssemblies[i];
						this.GetReferencedAssemblies(Assembly.Load(assemblyName.FullName), parameters);
					}
				}
			}
		}

		private object InstantinateWebServiceProxy(Assembly assembly)
		{
			Type type = null;
			Type[] types = assembly.GetTypes();
			int num = 0;
			while (num < (int)types.Length)
			{
				Type type1 = types[num];
				object[] customAttributes = type1.GetCustomAttributes(typeof(WebServiceBindingAttribute), false);
				if ((int)customAttributes.Length <= 0)
				{
					if (type != null)
					{
						break;
					}
					num++;
				}
				else
				{
					type = type1;
					break;
				}
			}
			return assembly.CreateInstance(type.ToString());
		}
	}
}