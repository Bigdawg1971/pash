//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Management.Automation {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class DiscoveryExceptions {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DiscoveryExceptions() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("System.Management.Automation.DiscoveryExceptions", typeof(DiscoveryExceptions).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The alias &quot;{0}&quot; is declared multiple times..
        /// </summary>
        public static string AliasDeclaredMultipleTimes {
            get {
                return ResourceManager.GetString("AliasDeclaredMultipleTimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot resolve alias &apos;{0}&apos; because it refers to term &apos;{1}&apos;, which is not recognized as a cmdlet, function, operable program, or script file. Verify the term and try again..
        /// </summary>
        public static string AliasNotResolvedException {
            get {
                return ResourceManager.GetString("AliasNotResolvedException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument &apos;{0}&apos; is not recognized as a cmdlet, possibly because it does not derive from the Cmdlet or PSCmdlet classes: {1}.
        /// </summary>
        public static string CmdletDoesNotDeriveFromCmdletType {
            get {
                return ResourceManager.GetString("CmdletDoesNotDeriveFromCmdletType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cmdlet name &quot;{0}&quot; cannot be validated because it is not in the correct format. Cmdlet names must include a verb and a noun separated by a &quot;-&quot;, such as &quot;Get-Process&quot;..
        /// </summary>
        public static string CmdletFormatInvalid {
            get {
                return ResourceManager.GetString("CmdletFormatInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument &apos;{0}&apos; is not recognized as a cmdlet: {1}.
        /// </summary>
        public static string CmdletNotFoundException {
            get {
                return ResourceManager.GetString("CmdletNotFoundException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command could not be retrieved because the ArgumentList parameter can be specified only when retrieving a single cmdlet or script..
        /// </summary>
        public static string CommandArgsOnlyForSingleCmdlet {
            get {
                return ResourceManager.GetString("CommandArgsOnlyForSingleCmdlet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot retrieve an instance of CommandDiscovery..
        /// </summary>
        public static string CommandDiscoveryMissing {
            get {
                return ResourceManager.GetString("CommandDiscoveryMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; with value &apos;{1}&apos; cannot be processed because it is not a cmdlet and cannot be processed by the CommandProcessor..
        /// </summary>
        public static string CommandNameNotCmdlet {
            get {
                return ResourceManager.GetString("CommandNameNotCmdlet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;{0}&apos; is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again..
        /// </summary>
        public static string CommandNotFoundException {
            get {
                return ResourceManager.GetString("CommandNotFoundException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No matching commands include a parameter named &apos;{0}&apos;.  Check the spelling of the parameter name, and then try again..
        /// </summary>
        public static string CommandParameterNotFound {
            get {
                return ResourceManager.GetString("CommandParameterNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter could not be declared. Parameters can be declared only on fields and properties..
        /// </summary>
        public static string CompiledCommandParameterMemberMustBeFieldOrProperty {
            get {
                return ResourceManager.GetString("CompiledCommandParameterMemberMustBeFieldOrProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; command was found in the module &apos;{1}&apos;, but the module could not be loaded. For more information, run &apos;Import-Module {1}&apos;..
        /// </summary>
        public static string CouldNotAutoImportMatchingModule {
            get {
                return ResourceManager.GetString("CouldNotAutoImportMatchingModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The module &apos;{0}&apos; could not be loaded. For more information, run &apos;Import-Module {0}&apos;..
        /// </summary>
        public static string CouldNotAutoImportModule {
            get {
                return ResourceManager.GetString("CouldNotAutoImportModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot dot-source this command because it was defined in a different language mode. To invoke this command without importing its contents, omit the &apos;.&apos; operator..
        /// </summary>
        public static string DotSourceNotSupported {
            get {
                return ResourceManager.GetString("DotSourceNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; already exists as an assembly. Only one assembly can exist for a given name..
        /// </summary>
        public static string DuplicateAssemblyName {
            get {
                return ResourceManager.GetString("DuplicateAssemblyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; already exists as a cmdlet. Only one cmdlet can exist for a given name..
        /// </summary>
        public static string DuplicateCmdletName {
            get {
                return ResourceManager.GetString("DuplicateCmdletName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; already exists as a cmdlet Provider. Only one cmdlet Provider can exist for a given name..
        /// </summary>
        public static string DuplicateCmdletProviderName {
            get {
                return ResourceManager.GetString("DuplicateCmdletProviderName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; already exists as a script. Only one script can exist for a given name..
        /// </summary>
        public static string DuplicateScriptName {
            get {
                return ResourceManager.GetString("DuplicateScriptName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An ExecutionContext has not been set..
        /// </summary>
        public static string ExecutionContextNotSet {
            get {
                return ResourceManager.GetString("ExecutionContextNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process the cmdlet. A cmdlet name must consist of a verb and noun pair separated by &apos;-&apos;..
        /// </summary>
        public static string InvalidCmdletNameFormat {
            get {
                return ResourceManager.GetString("InvalidCmdletNameFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter &quot;{0}&quot; is declared in parameter-set &quot;{1}&quot; multiple times..
        /// </summary>
        public static string ParameterDeclaredInParameterSetMultipleTimes {
            get {
                return ResourceManager.GetString("ParameterDeclaredInParameterSetMultipleTimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} (Version {1}).
        /// </summary>
        public static string PSSnapInNameVersion {
            get {
                return ResourceManager.GetString("PSSnapInNameVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The script &apos;{0}&apos; cannot be run because it contained a &quot;#requires&quot; statement with a shell ID of {1} that is incompatible with the current shell. To run this script you must use the shell located at &apos;{2}&apos;..
        /// </summary>
        public static string RequiresInterpreterNotCompatible {
            get {
                return ResourceManager.GetString("RequiresInterpreterNotCompatible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The script &apos;{0}&apos; cannot be run because it contained a &quot;#requires&quot; statement with a shell ID of {1} that is incompatible with the current shell..
        /// </summary>
        public static string RequiresInterpreterNotCompatibleNoPath {
            get {
                return ResourceManager.GetString("RequiresInterpreterNotCompatibleNoPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The script &apos;{0}&apos; cannot be run because the following modules that are specified by the &quot;#requires&quot; statements of the script are missing: {1}..
        /// </summary>
        public static string RequiresMissingModules {
            get {
                return ResourceManager.GetString("RequiresMissingModules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The script &apos;{0}&apos; cannot be run because the following snap-ins that are specified by the &quot;#requires&quot; statements of the script are missing: {1}..
        /// </summary>
        public static string RequiresMissingPSSnapIns {
            get {
                return ResourceManager.GetString("RequiresMissingPSSnapIns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The script &apos;{0}&apos; cannot be run because it contained a &quot;#requires&quot; statement for Windows PowerShell version {1}. The version required by the script does not match the currently running version of Windows PowerShell version {2}..
        /// </summary>
        public static string RequiresPSVersionNotCompatible {
            get {
                return ResourceManager.GetString("RequiresPSVersionNotCompatible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #Requires has specified only a shellID. #Requires needs to specify a required Windows PowerShell Snap-In when running in Windows PowerShell..
        /// </summary>
        public static string RequiresShellIDInvalidForSingleShell {
            get {
                return ResourceManager.GetString("RequiresShellIDInvalidForSingleShell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter name &quot;{0}&quot; is reserved for future use..
        /// </summary>
        public static string ReservedParameterName {
            get {
                return ResourceManager.GetString("ReservedParameterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process the #requires statement because it is not in the correct format.
        ///The #requires statement must be in one of the following formats:
        /// &quot;#requires -shellid &lt;shellID&gt;&quot;
        /// &quot;#requires -version &lt;major.minor&gt;&quot;
        /// &quot;#requires -pssnapin &lt;psSnapInName&gt; [-version &lt;major.minor&gt;]&quot;
        /// &quot;#requires -modules &lt;ModuleSpecification&gt;&quot;.
        /// </summary>
        public static string ScriptRequiresInvalidFormat {
            get {
                return ResourceManager.GetString("ScriptRequiresInvalidFormat", resourceCulture);
            }
        }
    }
}
