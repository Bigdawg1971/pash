//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Management.Automation {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class ParserStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ParserStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("System.Management.Automation.ParserStrings", typeof(ParserStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A hash table can only be added to another hash table..
        /// </summary>
        public static string AddHashTableToNonHashTable {
            get {
                return ResourceManager.GetString("AddHashTableToNonHashTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to * stream.
        /// </summary>
        public static string AllStream {
            get {
                return ResourceManager.GetString("AllStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous parameter &apos;-{0}&apos;
        ///Possible matches are.
        /// </summary>
        public static string AmbiguousParameterBaseMessage {
            get {
                return ResourceManager.GetString("AmbiguousParameterBaseMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///	{0} ({1}).
        /// </summary>
        public static string AmbiguousParameterExtendMessage {
            get {
                return ResourceManager.GetString("AmbiguousParameterExtendMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path cannot be processed because it resolved to more than one file; can process only one file at a time..
        /// </summary>
        public static string AmbiguousPath {
            get {
                return ResourceManager.GetString("AmbiguousPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ampersand not allowed. The &amp; operator is reserved for future use; use &quot;&amp;&quot; to pass ampersand as a string..
        /// </summary>
        public static string AmpersandNotAllowed {
            get {
                return ResourceManager.GetString("AmpersandNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array assignment to [{0}] failed: {1}..
        /// </summary>
        public static string ArrayAssignmentFailed {
            get {
                return ResourceManager.GetString("ArrayAssignmentFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array multiplication resulting in more than {0} elements is not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string ArrayMultiplyToolongInDataSection {
            get {
                return ResourceManager.GetString("ArrayMultiplyToolongInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array references are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string ArrayReferenceNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("ArrayReferenceNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array assignment to [{0}] failed because assignment to slices is not supported..
        /// </summary>
        public static string ArraySliceAssignmentFailed {
            get {
                return ResourceManager.GetString("ArraySliceAssignmentFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The right operand of &apos;-as&apos; must be a type..
        /// </summary>
        public static string AsOperatorRequiresType {
            get {
                return ResourceManager.GetString("AsOperatorRequiresType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment statements are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string AssignmentStatementNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("AssignmentStatementNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An ast cannot be used as the child of more than one ast..
        /// </summary>
        public static string AstIsReused {
            get {
                return ResourceManager.GetString("AstIsReused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attributes are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string AttributeNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("AttributeNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error &apos;{0}&apos; occurred while processing this script. Text describing this error could not be loaded..
        /// </summary>
        public static string BackupParserMessage {
            get {
                return ResourceManager.GetString("BackupParserMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error &apos;{0}&apos; occurred while processing this script. Text describing this error could not be loaded due to error &apos;{1}&apos;..
        /// </summary>
        public static string BackupParserMessageWithException {
            get {
                return ResourceManager.GetString("BackupParserMessageWithException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while enumerating through a collection: {0}..
        /// </summary>
        public static string BadEnumeration {
            get {
                return ResourceManager.GetString("BadEnumeration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expression after &apos;{0}&apos; in a pipeline element produced a object that was not valid. It must result in a command name, script block or CommandInfo object..
        /// </summary>
        public static string BadExpression {
            get {
                return ResourceManager.GetString("BadExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not process combined Begin/Process/End clauses with command text. A script or function can either have begin/process/end clauses or command text but not both..
        /// </summary>
        public static string BadlyFormedCmdlet {
            get {
                return ResourceManager.GetString("BadlyFormedCmdlet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad numeric constant: {0}..
        /// </summary>
        public static string BadNumericConstant {
            get {
                return ResourceManager.GetString("BadNumericConstant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad argument to operator &apos;{0}&apos;: {1}..
        /// </summary>
        public static string BadOperatorArgument {
            get {
                return ResourceManager.GetString("BadOperatorArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad regular expression supplied to &apos;{0}&apos;: {1}..
        /// </summary>
        public static string BadRegularExpression {
            get {
                return ResourceManager.GetString("BadRegularExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} operator only permits 2 elements on the right-hand side, not {1}..
        /// </summary>
        public static string BadReplaceArgument {
            get {
                return ResourceManager.GetString("BadReplaceArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not continue processing, throw the exception instead..
        /// </summary>
        public static string BreakHelpMessage {
            get {
                return ResourceManager.GetString("BreakHelpMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &amp;Break.
        /// </summary>
        public static string BreakLabel {
            get {
                return ResourceManager.GetString("BreakLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find an appropriate constructor to instantiate the custom attribute object for type &apos;{0}&apos;..
        /// </summary>
        public static string CannotFindConstructorForCustomAttribute {
            get {
                return ResourceManager.GetString("CannotFindConstructorForCustomAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to index into an object of type {0}..
        /// </summary>
        public static string CannotIndex {
            get {
                return ResourceManager.GetString("CannotIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method cannot be invoked..
        /// </summary>
        public static string CannotInvoke {
            get {
                return ResourceManager.GetString("CannotInvoke", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot run a document in the middle of a pipeline: {0}..
        /// </summary>
        public static string CantActivateDocumentInPipeline {
            get {
                return ResourceManager.GetString("CantActivateDocumentInPipeline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use &apos;&amp;&apos; to invoke in the context of binary module &apos;{0}&apos;. Specify a non-binary module after the &apos;&amp;&apos; and try the operation again..
        /// </summary>
        public static string CantInvokeInBinaryModule {
            get {
                return ResourceManager.GetString("CantInvokeInBinaryModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use &apos;&amp;&apos; to invoke in the context of module &apos;{0}&apos; because it is not imported. Import the module &apos;{0}&apos; and try the operation again..
        /// </summary>
        public static string CantInvokeInNonImportedModule {
            get {
                return ResourceManager.GetString("CantInvokeInNonImportedModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command &apos;{0}&apos; is not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string CmdletNotInAllowedListForDataSection {
            get {
                return ResourceManager.GetString("CmdletNotInAllowedListForDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unhandled COM interop exception occurred: {0}.
        /// </summary>
        public static string COMException {
            get {
                return ResourceManager.GetString("COMException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Report the error then continue with the next script statement..
        /// </summary>
        public static string ContinueHelpMessage {
            get {
                return ResourceManager.GetString("ContinueHelpMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &amp;Continue.
        /// </summary>
        public static string ContinueLabel {
            get {
                return ResourceManager.GetString("ContinueLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Control cannot leave a finally block..
        /// </summary>
        public static string ControlLeavingFinally {
            get {
                return ResourceManager.GetString("ControlLeavingFinally", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the type for custom attribute &apos;{0}&apos;. Make sure that the assembly that contains this type is loaded..
        /// </summary>
        public static string CustomAttributeTypeNotFound {
            get {
                return ResourceManager.GetString("CustomAttributeTypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Data section variable &quot;{0}&quot; has already been used for an existing variable or another Data section..
        /// </summary>
        public static string DataSectionNameHasAlreadyBeenUsed {
            get {
                return ResourceManager.GetString("DataSectionNameHasAlreadyBeenUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data statement is not allowed in restricted language mode or another Data section..
        /// </summary>
        public static string DataSectionStatementNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("DataSectionStatementNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug stream.
        /// </summary>
        public static string DebugStream {
            get {
                return ResourceManager.GetString("DebugStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dot sourcing is not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string DotSourcingNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("DotSourcingNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Do and While statements are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string DoWhileStatementNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("DoWhileStatementNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate parameter ${0} in parameter list..
        /// </summary>
        public static string DuplicateFormalParameter {
            get {
                return ResourceManager.GetString("DuplicateFormalParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate keys &apos;{0}&apos; are not allowed in hash literals..
        /// </summary>
        public static string DuplicateKeyInHashLiteral {
            get {
                return ResourceManager.GetString("DuplicateKeyInHashLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate named arguments &apos;{0}&apos; are not allowed..
        /// </summary>
        public static string DuplicateNamedArgument {
            get {
                return ResourceManager.GetString("DuplicateNamedArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Script command clause &apos;{0}&apos; has already been defined..
        /// </summary>
        public static string DuplicateScriptCommandClause {
            get {
                return ResourceManager.GetString("DuplicateScriptCommandClause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Braced variable name cannot be empty..
        /// </summary>
        public static string EmptyBracedVariableName {
            get {
                return ResourceManager.GetString("EmptyBracedVariableName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Catch block must be the last catch block..
        /// </summary>
        public static string EmptyCatchNotLast {
            get {
                return ResourceManager.GetString("EmptyCatchNotLast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An empty pipe element is not allowed..
        /// </summary>
        public static string EmptyPipeElement {
            get {
                return ResourceManager.GetString("EmptyPipeElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty ${} variable reference, there should be a name between the braces..
        /// </summary>
        public static string EmptyVariableReference {
            get {
                return ResourceManager.GetString("EmptyVariableReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing } at end of variable name..
        /// </summary>
        public static string EndBraceExpectedAtEndOfVariableName {
            get {
                return ResourceManager.GetString("EndBraceExpectedAtEndOfVariableName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing ) at end of subexpression..
        /// </summary>
        public static string EndBracketExpectedAtEndOfSubExpression {
            get {
                return ResourceManager.GetString("EndBracketExpectedAtEndOfSubExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing ] at end of attribute or type literal..
        /// </summary>
        public static string EndSquareBracketExpectedAtEndOfAttribute {
            get {
                return ResourceManager.GetString("EndSquareBracketExpectedAtEndOfAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing ] at end of type token..
        /// </summary>
        public static string EndSquareBracketExpectedAtEndOfType {
            get {
                return ResourceManager.GetString("EndSquareBracketExpectedAtEndOfType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can only use the &apos;=&apos; operator when assigning to a list of variables..
        /// </summary>
        public static string EqualsNotSupported {
            get {
                return ResourceManager.GetString("EqualsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parser errors were detected..
        /// </summary>
        public static string ErrorCollection {
            get {
                return ResourceManager.GetString("ErrorCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to error stream.
        /// </summary>
        public static string ErrorStream {
            get {
                return ResourceManager.GetString("ErrorStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action to take for this exception:.
        /// </summary>
        public static string ExceptionActionPromptCaption {
            get {
                return ResourceManager.GetString("ExceptionActionPromptCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception type {0} is already handled by a previous handler..
        /// </summary>
        public static string ExceptionTypeAlreadyCaught {
            get {
                return ResourceManager.GetString("ExceptionTypeAlreadyCaught", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expandable strings are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string ExpandableStringNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("ExpandableStringNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expandable strings are not allowed in the list of supported commands for the Data section..
        /// </summary>
        public static string ExpandableStringsNotSupportedInDataSectionCmdletList {
            get {
                return ResourceManager.GetString("ExpandableStringsNotSupportedInDataSectionCmdletList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected &apos;;&apos;, &apos;}}&apos; or end-of-line, not {0}..
        /// </summary>
        public static string ExpectedEndOfLine {
            get {
                return ResourceManager.GetString("ExpectedEndOfLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression was expected after &apos;(&apos;..
        /// </summary>
        public static string ExpectedExpression {
            get {
                return ResourceManager.GetString("ExpectedExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must provide a value expression on the right-hand side of the &apos;{0}&apos; operator..
        /// </summary>
        public static string ExpectedValueExpression {
            get {
                return ResourceManager.GetString("ExpectedValueExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expressions are only allowed as the first element of a pipeline..
        /// </summary>
        public static string ExpressionsMustBeFirstInPipeline {
            get {
                return ResourceManager.GetString("ExpressionsMustBeFirstInPipeline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No files matching &apos;{0}&apos; were found..
        /// </summary>
        public static string FileNotFound {
            get {
                return ResourceManager.GetString("FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current provider ({0}) cannot open a file..
        /// </summary>
        public static string FileOpenError {
            get {
                return ResourceManager.GetString("FileOpenError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file could not be read: {0}..
        /// </summary>
        public static string FileReadError {
            get {
                return ResourceManager.GetString("FileReadError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Flow control statements such as Break, Continue, Return, Exit, and Throw are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string FlowControlStatementNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("FlowControlStatementNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Foreach statements are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string ForeachStatementNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("ForeachStatementNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error formatting a string: {0}..
        /// </summary>
        public static string FormatError {
            get {
                return ResourceManager.GetString("FormatError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For and While statements are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string ForWhileStatementNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("ForWhileStatementNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;from&apos; keyword is not supported in this version of the language..
        /// </summary>
        public static string FromKeywordNotAllowed {
            get {
                return ResourceManager.GetString("FromKeywordNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Function declarations are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string FunctionDeclarationNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("FunctionDeclarationNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert hashtable to an object of the following type: {0}. Hashtable-to-Object conversion is not supported in restricted language mode or a Data section..
        /// </summary>
        public static string HashtableToObjectConversionNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("HashtableToObjectConversionNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to host stream.
        /// </summary>
        public static string HostStream {
            get {
                return ResourceManager.GetString("HostStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing condition in if statement after &apos;{0} (&apos;..
        /// </summary>
        public static string IfStatementMissingCondition {
            get {
                return ResourceManager.GetString("IfStatementMissingCondition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to $(subexpression) is missing the closing &apos;)&apos;..
        /// </summary>
        public static string IncompleteDollarSubexpressionReference {
            get {
                return ResourceManager.GetString("IncompleteDollarSubexpressionReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ${{variable}} reference starting is missing the closing &apos;}}&apos;..
        /// </summary>
        public static string IncompleteDollarVariableReference {
            get {
                return ResourceManager.GetString("IncompleteDollarVariableReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hash literal was incomplete..
        /// </summary>
        public static string IncompleteHashLiteral {
            get {
                return ResourceManager.GetString("IncompleteHashLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incomplete string token..
        /// </summary>
        public static string IncompleteString {
            get {
                return ResourceManager.GetString("IncompleteString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch statement was incomplete..
        /// </summary>
        public static string IncompleteSwitchStatement {
            get {
                return ResourceManager.GetString("IncompleteSwitchStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incomplete variable reference token..
        /// </summary>
        public static string IncompleteVariableReference {
            get {
                return ResourceManager.GetString("IncompleteVariableReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assigning to array element at index [{0}] failed: {1}..
        /// </summary>
        public static string IndexOperationFailed {
            get {
                return ResourceManager.GetString("IndexOperationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array assignment failed because index &apos;{0}&apos; was out of range..
        /// </summary>
        public static string IndexOutOfRange {
            get {
                return ResourceManager.GetString("IndexOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable reference is not valid. The variable name is missing..
        /// </summary>
        public static string InvalidBracedVariableReference {
            get {
                return ResourceManager.GetString("InvalidBracedVariableReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A COM object was accessed after it was already released: {0}.
        /// </summary>
        public static string InvalidComObjectException {
            get {
                return ResourceManager.GetString("InvalidComObjectException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The custom attribute type &apos;{0}&apos; is not derived from System.Attribute..
        /// </summary>
        public static string InValidCustomAttributeType {
            get {
                return ResourceManager.GetString("InValidCustomAttributeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body of the Data section is not valid. The Data section body can be only a convert-* command invocation optionally enclosed by an If statement..
        /// </summary>
        public static string InvalidDataSectionBody {
            get {
                return ResourceManager.GetString("InvalidDataSectionBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The token &apos;{0}&apos; is not a valid statement separator in this version..
        /// </summary>
        public static string InvalidEndOfLine {
            get {
                return ResourceManager.GetString("InvalidEndOfLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filename argument to -file in switch statement is not valid..
        /// </summary>
        public static string InvalidFilenameOption {
            get {
                return ResourceManager.GetString("InvalidFilenameOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter {0} is not valid for the foreach statement..
        /// </summary>
        public static string InvalidForeachFlag {
            get {
                return ResourceManager.GetString("InvalidForeachFlag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter declarations are a comma-separated list of variable names with optional initializer expressions..
        /// </summary>
        public static string InvalidFunctionParameter {
            get {
                return ResourceManager.GetString("InvalidFunctionParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Character &apos;{0}&apos; is not valid, labels can only contain characters, numbers and &apos;_&apos;..
        /// </summary>
        public static string InvalidLabelCharacter {
            get {
                return ResourceManager.GetString("InvalidLabelCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment expression is not valid. The left hand side of an assignment operator needs to be something that can be assigned to like a variable or a property..
        /// </summary>
        public static string InvalidLeftHandSide {
            get {
                return ResourceManager.GetString("InvalidLeftHandSide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A null key is not allowed in a hash literal..
        /// </summary>
        public static string InvalidNullKey {
            get {
                return ResourceManager.GetString("InvalidNullKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is not valid.
        /// </summary>
        public static string InvalidParameter {
            get {
                return ResourceManager.GetString("InvalidParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;{0}&quot; parameter of the Data section is not valid. The valid Data section parameter is SupportedCommand..
        /// </summary>
        public static string InvalidParameterForDataSectionStatement {
            get {
                return ResourceManager.GetString("InvalidParameterForDataSectionStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regular expression pattern is not valid: {0}..
        /// </summary>
        public static string InvalidRegularExpression {
            get {
                return ResourceManager.GetString("InvalidRegularExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Begin statement block, Process statement block, or parameter statement is not allowed in a Data section..
        /// </summary>
        public static string InvalidScriptBlockInDataSection {
            get {
                return ResourceManager.GetString("InvalidScriptBlockInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Combination of options to -split are not valid.
        /// </summary>
        public static string InvalidSplitOptionCombination {
            get {
                return ResourceManager.GetString("InvalidSplitOptionCombination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options are not allowed on -split operator with a predicate.
        /// </summary>
        public static string InvalidSplitOptionWithPredicate {
            get {
                return ResourceManager.GetString("InvalidSplitOptionWithPredicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter {0} is not valid for the switch statement..
        /// </summary>
        public static string InvalidSwitchFlag {
            get {
                return ResourceManager.GetString("InvalidSwitchFlag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A token that is not valid was found in the list of supported commands for the Data section..
        /// </summary>
        public static string InvalidTokenForDataSectionCmdletList {
            get {
                return ResourceManager.GetString("InvalidTokenForDataSectionCmdletList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression is not allowed in a Using expression..
        /// </summary>
        public static string InvalidUsingExpression {
            get {
                return ResourceManager.GetString("InvalidUsingExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable reference is not valid. &apos;$&apos; was not followed by a valid variable name character. Consider using ${} to delimit the name..
        /// </summary>
        public static string InvalidVariableReference {
            get {
                return ResourceManager.GetString("InvalidVariableReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable reference is not valid. &apos;:&apos; was not followed by a valid variable name character. Consider using ${} to delimit the name..
        /// </summary>
        public static string InvalidVariableReferenceWithDrive {
            get {
                return ResourceManager.GetString("InvalidVariableReferenceWithDrive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot invoke method. Method invocation is supported only on core types in this language mode..
        /// </summary>
        public static string InvokeMethodConstrainedLanguage {
            get {
                return ResourceManager.GetString("InvokeMethodConstrainedLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot call a method on a null-valued expression..
        /// </summary>
        public static string InvokeMethodOnNull {
            get {
                return ResourceManager.GetString("InvokeMethodOnNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The right operand of &apos;-is&apos; must be a type..
        /// </summary>
        public static string IsOperatorRequiresType {
            get {
                return ResourceManager.GetString("IsOperatorRequiresType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to assign to a dictionary of type {0} when the key is of type {1}..
        /// </summary>
        public static string KeyTypeMismatch {
            get {
                return ResourceManager.GetString("KeyTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method calls are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string MethodCallNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("MethodCallNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method invocation failed because [{0}] doesn&apos;t contain a method named &apos;{1}&apos;..
        /// </summary>
        public static string MethodNotFound {
            get {
                return ResourceManager.GetString("MethodNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing argument in parameter list..
        /// </summary>
        public static string MissingArgument {
            get {
                return ResourceManager.GetString("MissingArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array index expression is missing or not valid..
        /// </summary>
        public static string MissingArrayIndexExpression {
            get {
                return ResourceManager.GetString("MissingArrayIndexExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type name is missing the assembly name specification..
        /// </summary>
        public static string MissingAssemblyNameSpecification {
            get {
                return ResourceManager.GetString("MissingAssemblyNameSpecification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Catch block is missing its statement block..
        /// </summary>
        public static string MissingCatchHandlerBlock {
            get {
                return ResourceManager.GetString("MissingCatchHandlerBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Try statement is missing its Catch or Finally block..
        /// </summary>
        public static string MissingCatchOrFinally {
            get {
                return ResourceManager.GetString("MissingCatchOrFinally", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing close brace in data section statement..
        /// </summary>
        public static string MissingCloseBraceInDataSectionStatement {
            get {
                return ResourceManager.GetString("MissingCloseBraceInDataSectionStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing &apos;{&apos; in switch statement..
        /// </summary>
        public static string MissingCurlyBraceInSwitchStatement {
            get {
                return ResourceManager.GetString("MissingCurlyBraceInSwitchStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing closing &apos;}&apos; in statement block..
        /// </summary>
        public static string MissingEndCurlyBrace {
            get {
                return ResourceManager.GetString("MissingEndCurlyBrace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The terminator &apos;{0}&apos; is missing from the multiline comment..
        /// </summary>
        public static string MissingEndMultiLineComment {
            get {
                return ResourceManager.GetString("MissingEndMultiLineComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing closing &apos;)&apos; after expression part of foreach loop..
        /// </summary>
        public static string MissingEndParenthesisAfterForeach {
            get {
                return ResourceManager.GetString("MissingEndParenthesisAfterForeach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing closing &apos;)&apos; after expression in &apos;{0}&apos; statement..
        /// </summary>
        public static string MissingEndParenthesisAfterStatement {
            get {
                return ResourceManager.GetString("MissingEndParenthesisAfterStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing closing &apos;)&apos; in expression..
        /// </summary>
        public static string MissingEndParenthesisInExpression {
            get {
                return ResourceManager.GetString("MissingEndParenthesisInExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing &apos;)&apos; in function parameter list..
        /// </summary>
        public static string MissingEndParenthesisInFunctionParameterList {
            get {
                return ResourceManager.GetString("MissingEndParenthesisInFunctionParameterList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing &apos;)&apos; in method call..
        /// </summary>
        public static string MissingEndParenthesisInMethodCall {
            get {
                return ResourceManager.GetString("MissingEndParenthesisInMethodCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing closing &apos;)&apos; in subexpression..
        /// </summary>
        public static string MissingEndParenthesisInSubexpression {
            get {
                return ResourceManager.GetString("MissingEndParenthesisInSubexpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing &apos;)&apos; after expression in switch statement..
        /// </summary>
        public static string MissingEndParenthesisInSwitchStatement {
            get {
                return ResourceManager.GetString("MissingEndParenthesisInSwitchStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing &apos;]&apos; after array index expression..
        /// </summary>
        public static string MissingEndSquareBracket {
            get {
                return ResourceManager.GetString("MissingEndSquareBracket", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing &apos;=&apos; operator after key in hash literal..
        /// </summary>
        public static string MissingEqualsInHashLiteral {
            get {
                return ResourceManager.GetString("MissingEqualsInHashLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;=&quot; operator is missing after a named argument..
        /// </summary>
        public static string MissingEqualsInNamedArgument {
            get {
                return ResourceManager.GetString("MissingEqualsInNamedArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing expression after &apos;{0}&apos; in pipeline element..
        /// </summary>
        public static string MissingExpression {
            get {
                return ResourceManager.GetString("MissingExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing expression after &apos;{0}&apos; in loop..
        /// </summary>
        public static string MissingExpressionAfterKeyword {
            get {
                return ResourceManager.GetString("MissingExpressionAfterKeyword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing expression after unary operator &apos;{0}&apos;..
        /// </summary>
        public static string MissingExpressionAfterOperator {
            get {
                return ResourceManager.GetString("MissingExpressionAfterOperator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing expression after &apos;{0}&apos;..
        /// </summary>
        public static string MissingExpressionAfterToken {
            get {
                return ResourceManager.GetString("MissingExpressionAfterToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing statement after &apos;=&apos; in named argument..
        /// </summary>
        public static string MissingExpressionInNamedArgument {
            get {
                return ResourceManager.GetString("MissingExpressionInNamedArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot process &apos;switch&apos; statement because of missing filename argument to -file option..
        /// </summary>
        public static string MissingFilenameOption {
            get {
                return ResourceManager.GetString("MissingFilenameOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing file specification after redirection operator..
        /// </summary>
        public static string MissingFileSpecification {
            get {
                return ResourceManager.GetString("MissingFileSpecification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Finally block is missing its statement block..
        /// </summary>
        public static string MissingFinallyStatementBlock {
            get {
                return ResourceManager.GetString("MissingFinallyStatementBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing expression in foreach loop..
        /// </summary>
        public static string MissingForeachExpression {
            get {
                return ResourceManager.GetString("MissingForeachExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing statement body in foreach loop..
        /// </summary>
        public static string MissingForeachStatement {
            get {
                return ResourceManager.GetString("MissingForeachStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing function body in function declaration..
        /// </summary>
        public static string MissingFunctionBody {
            get {
                return ResourceManager.GetString("MissingFunctionBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing &apos;in&apos; after variable in foreach loop..
        /// </summary>
        public static string MissingInInForeach {
            get {
                return ResourceManager.GetString("MissingInInForeach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing key before &apos;=&apos; in hash literal..
        /// </summary>
        public static string MissingKeyInHashLiteral {
            get {
                return ResourceManager.GetString("MissingKeyInHashLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing statement body in {0} loop..
        /// </summary>
        public static string MissingLoopStatement {
            get {
                return ResourceManager.GetString("MissingLoopStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing name after {0} keyword..
        /// </summary>
        public static string MissingNameAfterFunctionKeyword {
            get {
                return ResourceManager.GetString("MissingNameAfterFunctionKeyword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing statement block after &apos;{0}&apos;..
        /// </summary>
        public static string MissingNamedStatementBlock {
            get {
                return ResourceManager.GetString("MissingNamedStatementBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing the opening brace &quot;{&quot; in the Data section..
        /// </summary>
        public static string MissingOpenBraceInDataSectionStatement {
            get {
                return ResourceManager.GetString("MissingOpenBraceInDataSectionStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing opening &apos;(&apos; after keyword &apos;{0}&apos;..
        /// </summary>
        public static string MissingOpenParenthesisAfterKeyword {
            get {
                return ResourceManager.GetString("MissingOpenParenthesisAfterKeyword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing &apos;(&apos; after &apos;{0}&apos; in if statement..
        /// </summary>
        public static string MissingOpenParenthesisInIfStatement {
            get {
                return ResourceManager.GetString("MissingOpenParenthesisInIfStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing property name after reference operator..
        /// </summary>
        public static string MissingPropertyName {
            get {
                return ResourceManager.GetString("MissingPropertyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property reference or expression is missing or not valid..
        /// </summary>
        public static string MissingPropertyReference {
            get {
                return ResourceManager.GetString("MissingPropertyReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing statement body after keyword &apos;{0}&apos;..
        /// </summary>
        public static string MissingStatementAfterKeyword {
            get {
                return ResourceManager.GetString("MissingStatementAfterKeyword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing statement block after {0} ( condition )..
        /// </summary>
        public static string MissingStatementBlock {
            get {
                return ResourceManager.GetString("MissingStatementBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing statement block after &apos;else&apos; keyword..
        /// </summary>
        public static string MissingStatementBlockAfterElse {
            get {
                return ResourceManager.GetString("MissingStatementBlockAfterElse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Data section is missing its statement block..
        /// </summary>
        public static string MissingStatementBlockForDataSection {
            get {
                return ResourceManager.GetString("MissingStatementBlockForDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing statement after &apos;=&apos; in hash literal..
        /// </summary>
        public static string MissingStatementInHashLiteral {
            get {
                return ResourceManager.GetString("MissingStatementInHashLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing condition in switch statement clause..
        /// </summary>
        public static string MissingSwitchConditionExpression {
            get {
                return ResourceManager.GetString("MissingSwitchConditionExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing statement block in switch statement clause..
        /// </summary>
        public static string MissingSwitchStatementClause {
            get {
                return ResourceManager.GetString("MissingSwitchStatementClause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing expression after &apos;(&apos; in switch statement..
        /// </summary>
        public static string MissingSwitchValueExpression {
            get {
                return ResourceManager.GetString("MissingSwitchValueExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The terminator &apos;#&gt;&apos; is missing from the multiline comment..
        /// </summary>
        public static string MissingTerminatorMultiLineComment {
            get {
                return ResourceManager.GetString("MissingTerminatorMultiLineComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;trap&apos; statement was incomplete. A trap statement requires a body..
        /// </summary>
        public static string MissingTrapStatement {
            get {
                return ResourceManager.GetString("MissingTrapStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incomplete &apos;try&apos; statement. A try statement requires a body..
        /// </summary>
        public static string MissingTryStatement {
            get {
                return ResourceManager.GetString("MissingTryStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Try statement is missing its statement block..
        /// </summary>
        public static string MissingTryStatementBlock {
            get {
                return ResourceManager.GetString("MissingTryStatementBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing type literal..
        /// </summary>
        public static string MissingTypeLiteralToken {
            get {
                return ResourceManager.GetString("MissingTypeLiteralToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing type name after &apos;[&apos;..
        /// </summary>
        public static string MissingTypename {
            get {
                return ResourceManager.GetString("MissingTypename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SupportedCommand parameter of the Data section is missing a value. Supply a cmdlet or function name to the parameter..
        /// </summary>
        public static string MissingValueForSupportedCommandInDataSectionStatement {
            get {
                return ResourceManager.GetString("MissingValueForSupportedCommandInDataSectionStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing variable name after foreach..
        /// </summary>
        public static string MissingVariableNameAfterForeach {
            get {
                return ResourceManager.GetString("MissingVariableNameAfterForeach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing while or until keyword in do loop..
        /// </summary>
        public static string MissingWhileOrUntilInDoWhile {
            get {
                return ResourceManager.GetString("MissingWhileOrUntilInDoWhile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A switch statement can have only one default clause..
        /// </summary>
        public static string MultipleSwitchDefaultClauses {
            get {
                return ResourceManager.GetString("MultipleSwitchDefaultClauses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot index into a {0} dimensional array with index [{1}]..
        /// </summary>
        public static string NeedMultidimensionalIndex {
            get {
                return ResourceManager.GetString("NeedMultidimensionalIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [ref] cannot be applied to a variable that does not exist..
        /// </summary>
        public static string NonExistingVariableReference {
            get {
                return ResourceManager.GetString("NonExistingVariableReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot expand the splatted variable &apos;@{0}&apos;. Splatted variables cannot be used as part of a property or array expression. Assign the result of the expression to a temporary variable then splat the temporary variable instead..
        /// </summary>
        public static string NoPropertiesInSplatting {
            get {
                return ResourceManager.GetString("NoPropertiesInSplatting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation &apos;[{0}] {1} [{2}]&apos; is not defined..
        /// </summary>
        public static string NotADefinedOperationForType {
            get {
                return ResourceManager.GetString("NotADefinedOperationForType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to assign to an index into an object of type {0}..
        /// </summary>
        public static string NotADictionary {
            get {
                return ResourceManager.GetString("NotADictionary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot index into a null array..
        /// </summary>
        public static string NullArray {
            get {
                return ResourceManager.GetString("NullArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index operation failed; the array index evaluated to null..
        /// </summary>
        public static string NullArrayIndex {
            get {
                return ResourceManager.GetString("NullArrayIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A number cannot be both a long and floating point..
        /// </summary>
        public static string NumberBothLongAndFloatingPoint {
            get {
                return ResourceManager.GetString("NumberBothLongAndFloatingPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A command is referenced that is not allowed. Only convertfrom-* commands are supported in restricted language mode or a Data section..
        /// </summary>
        public static string OnlyConvertFromCmdletsAreSupportedInDataSection {
            get {
                return ResourceManager.GetString("OnlyConvertFromCmdletsAreSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The param statement cannot be used if arguments were specified in the function declaration..
        /// </summary>
        public static string OnlyOneParameterListAllowed {
            get {
                return ResourceManager.GetString("OnlyOneParameterListAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use `{ instead of { in variable names..
        /// </summary>
        public static string OpenBraceNeedsToBeBackTickedInVariableName {
            get {
                return ResourceManager.GetString("OpenBraceNeedsToBeBackTickedInVariableName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; operator failed: {1}..
        /// </summary>
        public static string OperatorFailed {
            get {
                return ResourceManager.GetString("OperatorFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operator &apos;{0}&apos; is not supported for type &apos;{1}&apos;..
        /// </summary>
        public static string OperatorNotSupportedForType {
            get {
                return ResourceManager.GetString("OperatorNotSupportedForType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; operator is not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string OperatorNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("OperatorNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; operator works only on numbers. The operand is a &apos;{1}&apos;..
        /// </summary>
        public static string OperatorRequiresNumber {
            get {
                return ResourceManager.GetString("OperatorRequiresNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; operator works only on variables or on properties..
        /// </summary>
        public static string OperatorRequiresVariableOrProperty {
            get {
                return ResourceManager.GetString("OperatorRequiresVariableOrProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} attribute can be specified only on a hash literal node..
        /// </summary>
        public static string OrderedAttributeOnlyOnHashLiteralNode {
            get {
                return ResourceManager.GetString("OrderedAttributeOnlyOnHashLiteralNode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to output stream.
        /// </summary>
        public static string OutputStream {
            get {
                return ResourceManager.GetString("OutputStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parallel and sequence blocks are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string ParallelAndSequenceBlockNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("ParallelAndSequenceBlockNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;-parallel&apos; parameter can be used only within a workflow..
        /// </summary>
        public static string ParallelNotSupported {
            get {
                return ResourceManager.GetString("ParallelNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter attributes need to be a constant or a script block..
        /// </summary>
        public static string ParameterAttributeArgumentNeedsToBeConstantOrScriptBlock {
            get {
                return ResourceManager.GetString("ParameterAttributeArgumentNeedsToBeConstantOrScriptBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter declarations are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string ParameterDeclarationNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("ParameterDeclarationNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment failed because [{0}] doesn&apos;t contain a settable property &apos;{1}()&apos;..
        /// </summary>
        public static string ParameterizedPropertyAssignmentFailed {
            get {
                return ResourceManager.GetString("ParameterizedPropertyAssignmentFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter {0} requires an argument..
        /// </summary>
        public static string ParameterRequiresArgument {
            get {
                return ResourceManager.GetString("ParameterRequiresArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A switch statement must have one of &apos;-file filename&apos; or &apos;( expression )&apos;..
        /// </summary>
        public static string PipelineValueRequired {
            get {
                return ResourceManager.GetString("PipelineValueRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Program &apos;{0}&apos; failed to run: {1}{2}..
        /// </summary>
        public static string ProgramFailedToExecute {
            get {
                return ResourceManager.GetString("ProgramFailedToExecute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a ReadOnly property..
        /// </summary>
        public static string PropertyIsReadOnly {
            get {
                return ResourceManager.GetString("PropertyIsReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;{0}&apos; cannot be found on this object; make sure it exists and is settable..
        /// </summary>
        public static string PropertyNotFound {
            get {
                return ResourceManager.GetString("PropertyNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;{0}&apos; cannot be found for type &apos;{1}&apos;..
        /// </summary>
        public static string PropertyNotFoundForType {
            get {
                return ResourceManager.GetString("PropertyNotFoundForType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;{0}&apos; cannot be found on this object. Make sure that it exists..
        /// </summary>
        public static string PropertyNotFoundStrict {
            get {
                return ResourceManager.GetString("PropertyNotFoundStrict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property references are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string PropertyReferenceNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("PropertyReferenceNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot set property. Property setting is supported only on core types in this language mode..
        /// </summary>
        public static string PropertySetConstrainedLanguage {
            get {
                return ResourceManager.GetString("PropertySetConstrainedLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Redirection to &apos;{0}&apos; failed: {1}.
        /// </summary>
        public static string RedirectionFailed {
            get {
                return ResourceManager.GetString("RedirectionFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; operator is reserved for future use..
        /// </summary>
        public static string RedirectionNotSupported {
            get {
                return ResourceManager.GetString("RedirectionNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Redirection is not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string RedirectionNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("RedirectionNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use [ref] with other types in a type constraint..
        /// </summary>
        public static string ReferenceNeedsToBeByItselfInTypeConstraint {
            get {
                return ResourceManager.GetString("ReferenceNeedsToBeByItselfInTypeConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot have two [ref] in a type sequence..
        /// </summary>
        public static string ReferenceNeedsToBeByItselfInTypeSequence {
            get {
                return ResourceManager.GetString("ReferenceNeedsToBeByItselfInTypeSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [ref] can only be the final type in type conversion sequence..
        /// </summary>
        public static string ReferenceNeedsToBeLastTypeInTypeConversion {
            get {
                return ResourceManager.GetString("ReferenceNeedsToBeLastTypeInTypeConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument must be constant..
        /// </summary>
        public static string RequiresArgumentMustBeConstant {
            get {
                return ResourceManager.GetString("RequiresArgumentMustBeConstant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument for the {0} parameter is not valid. Specify a valid string argument..
        /// </summary>
        public static string RequiresInvalidStringArgument {
            get {
                return ResourceManager.GetString("RequiresInvalidStringArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument for the Module parameter is not valid. {0}.
        /// </summary>
        public static string RequiresModuleInvalid {
            get {
                return ResourceManager.GetString("RequiresModuleInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument for the Version parameter is not valid. Specify a valid Windows PowerShell version, in the format major.minor version..
        /// </summary>
        public static string RequiresVersionInvalid {
            get {
                return ResourceManager.GetString("RequiresVersionInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; keyword is not supported in this version of the language..
        /// </summary>
        public static string ReservedKeywordNotAllowed {
            get {
                return ResourceManager.GetString("ReservedKeywordNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no Runspace available to run scripts in this thread. You can provide one in the DefaultRunspace property of the System.Management.Automation.Runspaces.Runspace type. The script block you attempted to invoke was: {0}.
        /// </summary>
        public static string ScriptBlockDelegateInvokedFromWrongThread {
            get {
                return ResourceManager.GetString("ScriptBlockDelegateInvokedFromWrongThread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Script block literals are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string ScriptBlockNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("ScriptBlockNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The syntax is not supported by this runspace. This might be because it is in no-language mode..
        /// </summary>
        public static string ScriptsNotAllowed {
            get {
                return ResourceManager.GetString("ScriptsNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Processing halted; script was too complicated.
        /// </summary>
        public static string ScriptTooComplicated {
            get {
                return ResourceManager.GetString("ScriptTooComplicated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not report this error, just continue with the next script statement..
        /// </summary>
        public static string SilentlyContinueHelpMessage {
            get {
                return ResourceManager.GetString("SilentlyContinueHelpMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to S&amp;ilently Continue.
        /// </summary>
        public static string SilentlyContinueLabel {
            get {
                return ResourceManager.GetString("SilentlyContinueLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The splatting operator &apos;@&apos; cannot be used to reference variables in an expression. &apos;@{0}&apos; can be used only as an argument to a command. To reference variables in an expression use &apos;${0}&apos;..
        /// </summary>
        public static string SplattingNotPermitted {
            get {
                return ResourceManager.GetString("SplattingNotPermitted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Splatted variables like &apos;@{0}&apos; cannot be part of a comma-separated list of arguments..
        /// </summary>
        public static string SplattingNotPermittedInArgumentList {
            get {
                return ResourceManager.GetString("SplattingNotPermittedInArgumentList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} for this command is already redirected..
        /// </summary>
        public static string StreamAlreadyRedirected {
            get {
                return ResourceManager.GetString("StreamAlreadyRedirected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function or command was called as if it were a method. Parameters should be separated by spaces. For information about parameters, see the about_Parameters Help topic..
        /// </summary>
        public static string StrictModeFunctionCallWithParens {
            get {
                return ResourceManager.GetString("StrictModeFunctionCallWithParens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to String multiplication results with more than &quot;{0}&quot; characters are not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string StringMultiplyToolongInDataSection {
            get {
                return ResourceManager.GetString("StringMultiplyToolongInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pause the current pipeline and return to the command prompt. Type exit to resume operation when you are done..
        /// </summary>
        public static string SuspendHelpMessage {
            get {
                return ResourceManager.GetString("SuspendHelpMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &amp;Suspend.
        /// </summary>
        public static string SuspendLabel {
            get {
                return ResourceManager.GetString("SuspendLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch statement is not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string SwitchStatementNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("SwitchStatementNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string is missing the terminator: {0}..
        /// </summary>
        public static string TerminatorExpectedAtEndOfString {
            get {
                return ResourceManager.GetString("TerminatorExpectedAtEndOfString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At char:{0}.
        /// </summary>
        public static string TextForCharPositionMessage {
            get {
                return ResourceManager.GetString("TextForCharPositionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At {0}:{1} char:{2}
        ///+ {3}.
        /// </summary>
        public static string TextForPositionMessage {
            get {
                return ResourceManager.GetString("TextForPositionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to line.
        /// </summary>
        public static string TextForWordLine {
            get {
                return ResourceManager.GetString("TextForWordLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executable script code found in signature block..
        /// </summary>
        public static string TokenAfterEndOfValidScriptText {
            get {
                return ResourceManager.GetString("TokenAfterEndOfValidScriptText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all parse errors were reported.  Correct the reported errors and try again..
        /// </summary>
        public static string TooManyErrors {
            get {
                return ResourceManager.GetString("TooManyErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     ! CALL function &apos;{0}&apos;.
        /// </summary>
        public static string TraceEnteringFunction {
            get {
                return ResourceManager.GetString("TraceEnteringFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     ! CALL function &apos;{0}&apos;  (defined in file &apos;{1}&apos;).
        /// </summary>
        public static string TraceEnteringFunctionDefinedInFile {
            get {
                return ResourceManager.GetString("TraceEnteringFunctionDefinedInFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     ! CALL script &apos;{0}&apos;.
        /// </summary>
        public static string TraceEnteringScript {
            get {
                return ResourceManager.GetString("TraceEnteringScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     ! CALL scriptblock..
        /// </summary>
        public static string TraceEnteringScriptBlock {
            get {
                return ResourceManager.GetString("TraceEnteringScriptBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     ! CALL method &apos;{0}&apos;.
        /// </summary>
        public static string TraceMethodCall {
            get {
                return ResourceManager.GetString("TraceMethodCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to    ! Setting parameterized property &apos;{0}&apos;.
        /// </summary>
        public static string TraceParameterizedPropertySet {
            get {
                return ResourceManager.GetString("TraceParameterizedPropertySet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0,4}+ {1}.
        /// </summary>
        public static string TraceScriptLineMessage {
            get {
                return ResourceManager.GetString("TraceScriptLineMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     ! SET-MULTIPLE ${0} = &apos;{1}&apos;..
        /// </summary>
        public static string TraceSetMultipleIndex {
            get {
                return ResourceManager.GetString("TraceSetMultipleIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     ! SET-MULTIPLE ${0} assigned remaining {1} values..
        /// </summary>
        public static string TraceSetMultipleRemaining {
            get {
                return ResourceManager.GetString("TraceSetMultipleRemaining", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     ! SET ${0} = &apos;{1}&apos;..
        /// </summary>
        public static string TraceVariableAssignment {
            get {
                return ResourceManager.GetString("TraceVariableAssignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     ! Trap or Catch on matching exception [{0}].
        /// </summary>
        public static string TrapOnExceptionMatch {
            get {
                return ResourceManager.GetString("TrapOnExceptionMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     ! Trap or Catch generic; caught [{0}].
        /// </summary>
        public static string TrapOnGenericException {
            get {
                return ResourceManager.GetString("TrapOnGenericException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     ! Trap or Catch on [{0}]; subclass of exception [{1}].
        /// </summary>
        public static string TrapOnSubclassMatch {
            get {
                return ResourceManager.GetString("TrapOnSubclassMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Trap statement is not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string TrapStatementNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("TrapStatementNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Try statement is not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string TryStatementNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("TryStatementNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected type [{0}] on the parameter statement..
        /// </summary>
        public static string TypeNotAllowedBeforeParam {
            get {
                return ResourceManager.GetString("TypeNotAllowedBeforeParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type {0} is not allowed in restricted language mode or a Data section..
        /// </summary>
        public static string TypeNotAllowedInDataSection {
            get {
                return ResourceManager.GetString("TypeNotAllowedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find type [{0}]: make sure that the assembly containing this type is loaded..
        /// </summary>
        public static string TypeNotFound {
            get {
                return ResourceManager.GetString("TypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find type [{0}]: Make sure that the assembly containing this type is loaded. Details: {1}.
        /// </summary>
        public static string TypeNotFoundWithMessage {
            get {
                return ResourceManager.GetString("TypeNotFoundWithMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected attribute &apos;{0}&apos;..
        /// </summary>
        public static string UnexpectedAttribute {
            get {
                return ResourceManager.GetString("UnexpectedAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The character is not allowed after a here string header but before the end of the line..
        /// </summary>
        public static string UnexpectedCharactersAfterHereStringHeader {
            get {
                return ResourceManager.GetString("UnexpectedCharactersAfterHereStringHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected keyword &apos;{0}&apos;..
        /// </summary>
        public static string UnexpectedKeyword {
            get {
                return ResourceManager.GetString("UnexpectedKeyword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected token &apos;{0}&apos; in expression or statement..
        /// </summary>
        public static string UnexpectedToken {
            get {
                return ResourceManager.GetString("UnexpectedToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal error - unexpected unary operator {0}..
        /// </summary>
        public static string UnexpectedUnaryOperator {
            get {
                return ResourceManager.GetString("UnexpectedUnaryOperator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown assignment operator &apos;{0}&apos;..
        /// </summary>
        public static string UnknownAssignmentOperator {
            get {
                return ResourceManager.GetString("UnknownAssignmentOperator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized token in source text..
        /// </summary>
        public static string UnrecognizedToken {
            get {
                return ResourceManager.GetString("UnrecognizedToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecoverable error in Windows PowerShell..
        /// </summary>
        public static string UnrecoverableParserError {
            get {
                return ResourceManager.GetString("UnrecoverableParserError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Using variable cannot be retrieved. A Using variable can be used only with Invoke-Command, Start-Job, or InlineScript in the script workflow. When it is used with Invoke-Command, the Using variable is valid only if the script block is invoked on a remote computer..
        /// </summary>
        public static string UsingWithoutInvokeCommand {
            get {
                return ResourceManager.GetString("UsingWithoutInvokeCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable &apos;${0}&apos; cannot be retrieved because it has not been set..
        /// </summary>
        public static string VariableIsUndefined {
            get {
                return ResourceManager.GetString("VariableIsUndefined", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A variable that cannot be referenced in restricted language mode or a Data section is being referenced. Variables that can be referenced include the following: $PSCulture, $PSUICulture, $true, $false, and  $null..
        /// </summary>
        public static string VariableReferenceNotSupportedInDataSection {
            get {
                return ResourceManager.GetString("VariableReferenceNotSupportedInDataSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to verbose stream.
        /// </summary>
        public static string VerboseStream {
            get {
                return ResourceManager.GetString("VerboseStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [void] cannot be used as a parameter type, or on the left side of an assignment..
        /// </summary>
        public static string VoidTypeConstraintNotAllowed {
            get {
                return ResourceManager.GetString("VoidTypeConstraintNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning stream.
        /// </summary>
        public static string WarningStream {
            get {
                return ResourceManager.GetString("WarningStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to White space is not allowed before the string terminator..
        /// </summary>
        public static string WhitespaceBeforeHereStringFooter {
            get {
                return ResourceManager.GetString("WhitespaceBeforeHereStringFooter", resourceCulture);
            }
        }
    }
}
