namespace System.Management.Automation
{
    using System;
    using System.Collections.Generic;

    internal static class SpecialVariables
    {
        internal static List<string> AllScopeSessionVariables = new List<string> { "ConsoleFileName", "ExecutionContext", "HOME", "Host", "PID", "PSCulture", "PSHOME", "PSUICulture", "PSVersionTable", "ShellId" };
        internal static readonly string[] AllScopeVariables = new string[] { "?", "ConsoleFileName", "ExecutionContext", "false", "HOME", "Host", "PID", "PSCulture", "PSHOME", "PSUICulture", "PSVersionTable", "ShellId", "true" };
        internal const string Args = "args";
        internal static readonly VariablePath ArgsVarPath = new VariablePath("local:args");
        internal static readonly string[] AutomaticVariables = new string[] { "_", "args", "this", "input", "PSCmdlet", "PSBoundParameters", "MyInvocation", "PSScriptRoot", "PSCommandPath" };
        internal static readonly Type[] AutomaticVariableTypes = new Type[] { typeof(object), typeof(object[]), typeof(object), typeof(object), typeof(PSScriptCmdlet), typeof(PSBoundParametersDictionary), typeof(InvocationInfo), typeof(string), typeof(string) };
        internal const string ConfirmPreference = "ConfirmPreference";
        internal static readonly VariablePath ConfirmPreferenceVarPath = new VariablePath("ConfirmPreference");
        internal const string ConsoleFileName = "ConsoleFileName";
        internal const string CurrentlyExecutingCommand = "CurrentlyExecutingCommand";
        internal static readonly VariablePath CurrentlyExecutingCommandVarPath = new VariablePath("CurrentlyExecutingCommand");
        internal const string DebugPreference = "DebugPreference";
        internal static readonly VariablePath DebugPreferenceVarPath = new VariablePath("DebugPreference");
        internal const string Error = "error";
        internal const string ErrorActionPreference = "ErrorActionPreference";
        internal static readonly VariablePath ErrorActionPreferenceVarPath = new VariablePath("ErrorActionPreference");
        internal static readonly VariablePath ErrorVarPath = new VariablePath("global:error");
        internal const string ErrorView = "ErrorView";
        internal static readonly VariablePath ErrorViewVarPath = new VariablePath("ErrorView");
        internal const string EventError = "error";
        internal static readonly VariablePath EventErrorVarPath = new VariablePath("script:error");
        internal const string ExecutionContext = "ExecutionContext";
        internal const string False = "false";
        internal static VariablePath FalseVarPath = new VariablePath("false");
        internal const string FirstToken = "^";
        internal static readonly VariablePath FirstTokenVarPath = new VariablePath("global:^");
        internal const string @foreach = "foreach";
        internal static readonly VariablePath foreachVarPath = new VariablePath("local:foreach");
        internal const string HistorySize = "MaximumHistoryCount";
        internal static readonly VariablePath HistorySizeVarPath = new VariablePath("MaximumHistoryCount");
        internal const string Home = "HOME";
        internal const string Host = "Host";
        internal const string Input = "input";
        internal static readonly VariablePath InputVarPath = new VariablePath("local:input");
        internal const string LastExitCode = "LASTEXITCODE";
        internal static readonly VariablePath LastExitCodeVarPath = new VariablePath("global:LASTEXITCODE");
        internal const string LastToken = "$";
        internal static readonly VariablePath LastTokenVarPath = new VariablePath("global:$");
        internal const string LogCommandHealthEvent = "LogCommandHealthEvent";
        internal static readonly VariablePath LogCommandHealthEventVarPath = new VariablePath("LogCommandHealthEvent");
        internal const string LogCommandLifecycleEvent = "LogCommandLifecycleEvent";
        internal static readonly VariablePath LogCommandLifecycleEventVarPath = new VariablePath("LogCommandLifecycleEvent");
        internal const string LogEngineHealthEvent = "LogEngineHealthEvent";
        internal static readonly VariablePath LogEngineHealthEventVarPath = new VariablePath("LogEngineHealthEvent");
        internal const string LogEngineLifecycleEvent = "LogEngineLifecycleEvent";
        internal static readonly VariablePath LogEngineLifecycleEventVarPath = new VariablePath("LogEngineLifecycleEvent");
        internal const string LogProviderHealthEvent = "LogProviderHealthEvent";
        internal static readonly VariablePath LogProviderHealthEventVarPath = new VariablePath("LogProviderHealthEvent");
        internal const string LogProviderLifecycleEvent = "LogProviderLifecycleEvent";
        internal static readonly VariablePath LogProviderLifecycleEventVarPath = new VariablePath("LogProviderLifecycleEvent");
        internal const string LogSettingsEvent = "LogSettingsEvent";
        internal static readonly VariablePath LogSettingsEventVarPath = new VariablePath("LogSettingsEvent");
        internal const string Matches = "Matches";
        internal static readonly VariablePath MatchesVarPath = new VariablePath("Matches");
        internal const string MyInvocation = "MyInvocation";
        internal static readonly VariablePath MyInvocationVarPath = new VariablePath("MyInvocation");
        internal static readonly VariablePath NestedPromptCounterVarPath = new VariablePath("global:NestedPromptLevel");
        internal const string NestedPromptLevel = "NestedPromptLevel";
        internal const string Null = "null";
        internal static VariablePath NullVarPath = new VariablePath("null");
        internal const string OFS = "OFS";
        internal static readonly VariablePath OFSVarPath = new VariablePath("OFS");
        internal const string OutputEncoding = "OutputEncoding";
        internal static readonly VariablePath OutputEncodingVarPath = new VariablePath("OutputEncoding");
        internal const string PathExt = "env:PATHEXT";
        internal static readonly VariablePath PathExtVarPath = new VariablePath("env:PATHEXT");
        internal const string PID = "PID";
        internal static readonly string[] PreferenceVariables = new string[] { "DebugPreference", "VerbosePreference", "ErrorActionPreference", "WhatIfPreference", "WarningPreference", "ConfirmPreference" };
        internal static readonly Type[] PreferenceVariableTypes = new Type[] { typeof(ActionPreference), typeof(ActionPreference), typeof(ActionPreference), typeof(SwitchParameter), typeof(ActionPreference), typeof(ConfirmImpact) };
        internal const string ProgressPreference = "ProgressPreference";
        internal static readonly VariablePath ProgressPreferenceVarPath = new VariablePath("ProgressPreference");
        internal const string PSBoundParameters = "PSBoundParameters";
        internal static readonly VariablePath PSBoundParametersVarPath = new VariablePath("PSBoundParameters");
        internal const string PSCmdlet = "PSCmdlet";
        internal static readonly VariablePath PSCmdletVarPath = new VariablePath("PSCmdlet");
        internal const string PSCommandPath = "PSCommandPath";
        internal static readonly VariablePath PSCommandPathVarPath = new VariablePath("PSCommandPath");
        internal const string PSCulture = "PSCulture";
        internal const string PSDebugContext = "PSDebugContext";
        internal static readonly VariablePath PSDebugContextVarPath = new VariablePath("PSDebugContext");
        internal const string PSDefaultParameterValues = "PSDefaultParameterValues";
        internal static readonly VariablePath PSDefaultParameterValuesVarPath = new VariablePath("PSDefaultParameterValues");
        internal const string PSEmailServer = "PSEmailServer";
        internal static readonly VariablePath PSEmailServerVarPath = new VariablePath("PSEmailServer");
        internal const string PSHome = "PSHOME";
        internal const string PSItem = "PSItem";
        internal const string PSLogUserData = "PSLogUserData";
        internal static readonly VariablePath PSLogUserDataPath = new VariablePath("PSLogUserData");
        internal const string PSModuleAutoLoading = "PSModuleAutoLoadingPreference";
        internal static VariablePath PSModuleAutoLoadingPreferenceVarPath = new VariablePath("global:PSModuleAutoLoadingPreference");
        internal const string PSScriptRoot = "PSScriptRoot";
        internal static readonly VariablePath PSScriptRootVarPath = new VariablePath("PSScriptRoot");
        internal const string PSSessionApplicationName = "PSSessionApplicationName";
        internal static readonly VariablePath PSSessionApplicationNameVarPath = new VariablePath("global:PSSessionApplicationName");
        internal const string PSSessionConfigurationName = "PSSessionConfigurationName";
        internal static readonly VariablePath PSSessionConfigurationNameVarPath = new VariablePath("global:PSSessionConfigurationName");
        internal const string PSUICulture = "PSUICulture";
        internal const string PSVersionTable = "PSVersionTable";
        internal const string pwd = "PWD";
        internal static VariablePath PWDVarPath = new VariablePath("global:PWD");
        internal const string Question = "?";
        internal static readonly VariablePath QuestionVarPath = new VariablePath("?");
        internal const string ShellId = "ShellId";
        internal const string StackTrace = "StackTrace";
        internal static readonly VariablePath StackTraceVarPath = new VariablePath("global:StackTrace");
        internal const string @switch = "switch";
        internal static readonly VariablePath switchVarPath = new VariablePath("local:switch");
        internal const string This = "this";
        internal static readonly VariablePath ThisVarPath = new VariablePath("this");
        internal const string True = "true";
        internal static VariablePath TrueVarPath = new VariablePath("true");
        internal const string Underbar = "_";
        internal static readonly VariablePath UnderbarVarPath = new VariablePath("_");
        internal const string VerboseHelpErrors = "VerboseHelpErrors";
        internal static readonly VariablePath VerboseHelpErrorsVarPath = new VariablePath("VerboseHelpErrors");
        internal const string VerbosePreference = "VerbosePreference";
        internal static readonly VariablePath VerbosePreferenceVarPath = new VariablePath("VerbosePreference");
        internal const string WarningPreference = "WarningPreference";
        internal static readonly VariablePath WarningPreferenceVarPath = new VariablePath("WarningPreference");
        internal const string WhatIfPreference = "WhatIfPreference";
        internal static readonly VariablePath WhatIfPreferenceVarPath = new VariablePath("WhatIfPreference");
    }
}

