namespace System.Management.Automation.Language
{
    using System;
    using System.Collections;
    using System.Collections.Specialized;
    using System.IO;
    using System.Management.Automation.Internal;
    using System.Management.Automation.Runspaces;
    using System.Reflection;

    internal static class CachedReflectionInfo
    {
        internal static readonly MethodInfo ArrayList_Add = typeof(ArrayList).GetMethod("Add", new Type[] { typeof(object) });
        internal static readonly PropertyInfo ArrayList_Count = typeof(ArrayList).GetProperty("Count");
        internal static readonly ConstructorInfo ArrayList_ctor = typeof(ArrayList).GetConstructor(Type.EmptyTypes);
        internal static readonly MethodInfo ArrayList_get_Item = typeof(ArrayList).GetMethod("get_Item", new Type[] { typeof(int) });
        internal static readonly MethodInfo ArrayList_ToArray = typeof(ArrayList).GetMethod("ToArray", Type.EmptyTypes);
        internal static readonly MethodInfo ArrayOps_GetMDArrayValue = typeof(ArrayOps).GetMethod("GetMDArrayValue", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ArrayOps_GetMDArrayValueOrSlice = typeof(ArrayOps).GetMethod("GetMDArrayValueOrSlice", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ArrayOps_GetNonIndexable = typeof(ArrayOps).GetMethod("GetNonIndexable", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ArrayOps_IndexStringMessage = typeof(ArrayOps).GetMethod("IndexStringMessage", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ArrayOps_Multiply = typeof(ArrayOps).GetMethod("Multiply", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ArrayOps_SetMDArrayValue = typeof(ArrayOps).GetMethod("SetMDArrayValue", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ArrayOps_SlicingIndex = typeof(ArrayOps).GetMethod("SlicingIndex", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly ConstructorInfo BreakException_ctor = typeof(BreakException).GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null, CallingConventions.Standard, new Type[] { typeof(string) }, null);
        internal static readonly MethodInfo CharOps_CompareIeq = typeof(CharOps).GetMethod("CompareIeq", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo CharOps_CompareIne = typeof(CharOps).GetMethod("CompareIne", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo CommandParameterInternal_CreateArgument = typeof(CommandParameterInternal).GetMethod("CreateArgument", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo CommandParameterInternal_CreateParameter = typeof(CommandParameterInternal).GetMethod("CreateParameter", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo CommandParameterInternal_CreateParameterWithArgument = typeof(CommandParameterInternal).GetMethod("CreateParameterWithArgument", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo CommandProcessorBase_CheckForSevereException = typeof(CommandProcessorBase).GetMethod("CheckForSevereException", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo CommandRedirection_UnbindForExpression = typeof(CommandRedirection).GetMethod("UnbindForExpression", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly ConstructorInfo ContinueException_ctor = typeof(ContinueException).GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null, CallingConventions.Standard, new Type[] { typeof(string) }, null);
        internal static readonly MethodInfo Convert_ChangeType = typeof(Convert).GetMethod("ChangeType", new Type[] { typeof(object), typeof(Type) });
        internal static readonly MethodInfo Debugger_EnterScriptFunction = typeof(Debugger).GetMethod("EnterScriptFunction", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo Debugger_ExitScriptFunction = typeof(Debugger).GetMethod("ExitScriptFunction", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo Debugger_OnSequencePointHit = typeof(Debugger).GetMethod("OnSequencePointHit", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo EnumerableOps_AddEnumerable = typeof(EnumerableOps).GetMethod("AddEnumerable", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_AddObject = typeof(EnumerableOps).GetMethod("AddObject", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_Compare = typeof(EnumerableOps).GetMethod("Compare", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_Current = typeof(EnumerableOps).GetMethod("Current", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_GetCOMEnumerator = typeof(EnumerableOps).GetMethod("GetCOMEnumerator", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_GetEnumerator = typeof(EnumerableOps).GetMethod("GetEnumerator", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_GetGenericEnumerator = typeof(EnumerableOps).GetMethod("GetGenericEnumerator", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_GetSlice = typeof(EnumerableOps).GetMethod("GetSlice", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_MethodInvoker = typeof(EnumerableOps).GetMethod("MethodInvoker", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_MoveNext = typeof(EnumerableOps).GetMethod("MoveNext", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_Multiply = typeof(EnumerableOps).GetMethod("Multiply", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_PropertyGetter = typeof(EnumerableOps).GetMethod("PropertyGetter", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_SlicingIndex = typeof(EnumerableOps).GetMethod("SlicingIndex", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_ToArray = typeof(EnumerableOps).GetMethod("ToArray", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo EnumerableOps_WriteEnumerableToPipe = typeof(EnumerableOps).GetMethod("WriteEnumerableToPipe", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly ConstructorInfo ErrorRecord__ctor = typeof(ErrorRecord).GetConstructor(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance, null, CallingConventions.Standard, new Type[] { typeof(ErrorRecord), typeof(RuntimeException) }, null);
        internal static readonly PropertyInfo Exception_Message = typeof(Exception).GetProperty("Message");
        internal static readonly MethodInfo ExceptionHandlingOps_CheckActionPreference = typeof(ExceptionHandlingOps).GetMethod("CheckActionPreference", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ExceptionHandlingOps_ConvertToArgumentConversionException = typeof(ExceptionHandlingOps).GetMethod("ConvertToArgumentConversionException", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ExceptionHandlingOps_ConvertToException = typeof(ExceptionHandlingOps).GetMethod("ConvertToException", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ExceptionHandlingOps_ConvertToMethodInvocationException = typeof(ExceptionHandlingOps).GetMethod("ConvertToMethodInvocationException", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ExceptionHandlingOps_ConvertToRuntimeException = typeof(ExceptionHandlingOps).GetMethod("ConvertToRuntimeException", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ExceptionHandlingOps_FindMatchingHandler = typeof(ExceptionHandlingOps).GetMethod("FindMatchingHandler", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ExceptionHandlingOps_RestoreStoppingPipeline = typeof(ExceptionHandlingOps).GetMethod("RestoreStoppingPipeline", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ExceptionHandlingOps_SuspendStoppingPipeline = typeof(ExceptionHandlingOps).GetMethod("SuspendStoppingPipeline", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly PropertyInfo ExecutionContext_CurrentExceptionBeingHandled = typeof(ExecutionContext).GetProperty("CurrentExceptionBeingHandled", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly FieldInfo ExecutionContext_Debugger = typeof(ExecutionContext).GetField("_debugger", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly FieldInfo ExecutionContext_DebuggingMode = typeof(ExecutionContext).GetField("_debuggingMode", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly PropertyInfo ExecutionContext_ExceptionHandlerInEnclosingStatementBlock = typeof(ExecutionContext).GetProperty("ExceptionHandlerInEnclosingStatementBlock", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly PropertyInfo ExecutionContext_ExpressionDebugOutputPipe = typeof(ExecutionContext).GetProperty("ExpressionDebugOutputPipe", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly PropertyInfo ExecutionContext_ExpressionVerboseOutputPipe = typeof(ExecutionContext).GetProperty("ExpressionVerboseOutputPipe", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly PropertyInfo ExecutionContext_ExpressionWarningOutputPipe = typeof(ExecutionContext).GetProperty("ExpressionWarningOutputPipe", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo ExecutionContext_IsStrictVersion = typeof(ExecutionContext).GetMethod("IsStrictVersion", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly PropertyInfo ExecutionContext_LanguageMode = typeof(ExecutionContext).GetProperty("LanguageMode", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly PropertyInfo ExecutionContext_QuestionMarkVariableValue = typeof(ExecutionContext).GetProperty("QuestionMarkVariableValue", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly PropertyInfo ExecutionContext_ShellFunctionErrorOutputPipe = typeof(ExecutionContext).GetProperty("ShellFunctionErrorOutputPipe", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly PropertyInfo ExecutionContext_TypeTable = typeof(ExecutionContext).GetProperty("TypeTable", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo FileRedirection_BindForExpression = typeof(FileRedirection).GetMethod("BindForExpression", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly ConstructorInfo FileRedirection_ctor = typeof(FileRedirection).GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null, CallingConventions.Standard, new Type[] { typeof(RedirectionStream), typeof(bool), typeof(string) }, null);
        internal static readonly MethodInfo FileRedirection_Dispose = typeof(FileRedirection).GetMethod("Dispose");
        internal static readonly FieldInfo FunctionContext__currentSequencePointIndex = typeof(FunctionContext).GetField("_currentSequencePointIndex", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly FieldInfo FunctionContext__executionContext = typeof(FunctionContext).GetField("_executionContext", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly FieldInfo FunctionContext__functionName = typeof(FunctionContext).GetField("_functionName", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly FieldInfo FunctionContext__localsTuple = typeof(FunctionContext).GetField("_localsTuple", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly FieldInfo FunctionContext__outputPipe = typeof(FunctionContext).GetField("_outputPipe", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly FieldInfo FunctionContext__traps = typeof(FunctionContext).GetField("_traps", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo FunctionContext_PopTrapHandlers = typeof(FunctionContext).GetMethod("PopTrapHandlers", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo FunctionContext_PushTrapHandlers = typeof(FunctionContext).GetMethod("PushTrapHandlers", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo FunctionOps_DefineFunction = typeof(FunctionOps).GetMethod("DefineFunction", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo FunctionOps_DefineWorkflows = typeof(FunctionOps).GetMethod("DefineWorkflows", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly ConstructorInfo Hashtable_ctor = typeof(Hashtable).GetConstructor(BindingFlags.Public | BindingFlags.Instance, null, CallingConventions.Standard, new Type[] { typeof(int), typeof(IEqualityComparer) }, null);
        internal static readonly MethodInfo HashtableOps_Add = typeof(HashtableOps).GetMethod("Add", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo HashtableOps_AddKeyValuePair = typeof(HashtableOps).GetMethod("AddKeyValuePair", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly PropertyInfo ICollection_Count = typeof(ICollection).GetProperty("Count");
        internal static readonly MethodInfo IComparable_CompareTo = typeof(IComparable).GetMethod("CompareTo");
        internal static readonly MethodInfo IDictionary_set_Item = typeof(IDictionary).GetMethod("set_Item");
        internal static readonly MethodInfo IDisposable_Dispose = typeof(IDisposable).GetMethod("Dispose");
        internal static readonly MethodInfo IEnumerable_GetEnumerator = typeof(IEnumerable).GetMethod("GetEnumerator");
        internal static readonly PropertyInfo IEnumerator_Current = typeof(IEnumerator).GetProperty("Current");
        internal static readonly MethodInfo IEnumerator_MoveNext = typeof(IEnumerator).GetMethod("MoveNext");
        internal static readonly MethodInfo IList_get_Item = typeof(IList).GetMethod("get_Item");
        internal const BindingFlags instanceFlags = (BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo InterpreterError_NewInterpreterException = typeof(InterpreterError).GetMethod("NewInterpreterException", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo InterpreterError_NewInterpreterExceptionWithInnerException = typeof(InterpreterError).GetMethod("NewInterpreterExceptionWithInnerException", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo IntOps_Range = typeof(IntOps).GetMethod("Range", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo LanguagePrimitives_ThrowInvalidCastException = typeof(LanguagePrimitives).GetMethod("ThrowInvalidCastException", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo LocalPipeline_GetExecutionContextFromTLS = typeof(LocalPipeline).GetMethod("GetExecutionContextFromTLS", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo LoopFlowException_MatchLabel = typeof(LoopFlowException).GetMethod("MatchLabel", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo MergingRedirection_BindForExpression = typeof(MergingRedirection).GetMethod("BindForExpression", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly ConstructorInfo MethodException_ctor = typeof(MethodException).GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null, new Type[] { typeof(string), typeof(Exception), typeof(string), typeof(object[]) }, null);
        internal static readonly MethodInfo MutableTuple_IsValueSet = typeof(MutableTuple).GetMethod("IsValueSet", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo Object_Equals = typeof(object).GetMethod("Equals", new Type[] { typeof(object) });
        internal static readonly ConstructorInfo OrderedDictionary_ctor = typeof(OrderedDictionary).GetConstructor(BindingFlags.Public | BindingFlags.Instance, null, CallingConventions.Standard, new Type[] { typeof(int), typeof(IEqualityComparer) }, null);
        internal static readonly MethodInfo Parser_ScanNumber = typeof(Parser).GetMethod("ScanNumber", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ParserOps_ContainsOperatorCompiled = typeof(ParserOps).GetMethod("ContainsOperatorCompiled", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ParserOps_ImplicitOp = typeof(ParserOps).GetMethod("ImplicitOp", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ParserOps_JoinOperator = typeof(ParserOps).GetMethod("JoinOperator", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ParserOps_LikeOperator = typeof(ParserOps).GetMethod("LikeOperator", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ParserOps_MatchOperator = typeof(ParserOps).GetMethod("MatchOperator", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ParserOps_ReplaceOperator = typeof(ParserOps).GetMethod("ReplaceOperator", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ParserOps_SplitOperator = typeof(ParserOps).GetMethod("SplitOperator", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ParserOps_UnaryJoinOperator = typeof(ParserOps).GetMethod("UnaryJoinOperator", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ParserOps_UnarySplitOperator = typeof(ParserOps).GetMethod("UnarySplitOperator", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo Pipe_Add = typeof(Pipe).GetMethod("Add", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly ConstructorInfo Pipe_ctor = typeof(Pipe).GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null, CallingConventions.Standard, new Type[] { typeof(ArrayList) }, null);
        internal static readonly MethodInfo PipelineOps_CheckAutomationNullInCommandArgument = typeof(PipelineOps).GetMethod("CheckAutomationNullInCommandArgument", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PipelineOps_CheckAutomationNullInCommandArgumentArray = typeof(PipelineOps).GetMethod("CheckAutomationNullInCommandArgumentArray", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PipelineOps_CheckForInterrupts = typeof(PipelineOps).GetMethod("CheckForInterrupts", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PipelineOps_FlushPipe = typeof(PipelineOps).GetMethod("FlushPipe", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PipelineOps_GetExitException = typeof(PipelineOps).GetMethod("GetExitException", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PipelineOps_InvokePipeline = typeof(PipelineOps).GetMethod("InvokePipeline", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PipelineOps_Nop = typeof(PipelineOps).GetMethod("Nop", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PipelineOps_PipelineResult = typeof(PipelineOps).GetMethod("PipelineResult", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSGetDynamicMemberBinder_GetIDictionaryMember = typeof(PSGetDynamicMemberBinder).GetMethod("GetIDictionaryMember", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSGetMemberBinder_CloneMemberInfo = typeof(PSGetMemberBinder).GetMethod("CloneMemberInfo", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSGetMemberBinder_GetAdaptedValue = typeof(PSGetMemberBinder).GetMethod("GetAdaptedValue", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSGetMemberBinder_GetTypeTableFromTLS = typeof(PSGetMemberBinder).GetMethod("GetTypeTableFromTLS", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSGetMemberBinder_IsTypeNameSame = typeof(PSGetMemberBinder).GetMethod("IsTypeNameSame", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSGetMemberBinder_TryGetGenericDictionaryValue = typeof(PSGetMemberBinder).GetMethod("TryGetGenericDictionaryValue", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSGetMemberBinder_TryGetIDictionaryValue = typeof(PSGetMemberBinder).GetMethod("TryGetIDictionaryValue", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSGetMemberBinder_TryGetInstanceMember = typeof(PSGetMemberBinder).GetMethod("TryGetInstanceMember", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSInvokeMemberBinder_InvokeAdaptedMember = typeof(PSInvokeMemberBinder).GetMethod("InvokeAdaptedMember", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSInvokeMemberBinder_InvokeAdaptedSetMember = typeof(PSInvokeMemberBinder).GetMethod("InvokeAdaptedSetMember", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSInvokeMemberBinder_IsHeterogeneousArray = typeof(PSInvokeMemberBinder).GetMethod("IsHeterogeneousArray", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSInvokeMemberBinder_IsHomogenousArray = typeof(PSInvokeMemberBinder).GetMethod("IsHomogenousArray", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSInvokeMemberBinder_TryGetInstanceMethod = typeof(PSInvokeMemberBinder).GetMethod("TryGetInstanceMethod", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSMethodInfo_Invoke = typeof(PSMethodInfo).GetMethod("Invoke");
        internal static readonly PropertyInfo PSNoteProperty_Value = typeof(PSNoteProperty).GetProperty("Value");
        internal static readonly MethodInfo PSObject_Base = typeof(PSObject).GetMethod("Base", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly PropertyInfo PSObject_BaseObject = typeof(PSObject).GetProperty("BaseObject");
        internal static readonly FieldInfo PSObject_isDeserialized = typeof(PSObject).GetField("isDeserialized", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo PSObject_ToStringParser = typeof(PSObject).GetMethod("ToStringParser", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly PropertyInfo PSReference_Value = typeof(PSReference).GetProperty("Value");
        internal static readonly MethodInfo PSScriptMethod_InvokeScript = typeof(PSScriptMethod).GetMethod("InvokeScript", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSScriptProperty_InvokeGetter = typeof(PSScriptProperty).GetMethod("InvokeGetter", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo PSScriptProperty_InvokeSetter = typeof(PSScriptProperty).GetMethod("InvokeSetter", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo PSSetMemberBinder_SetAdaptedValue = typeof(PSSetMemberBinder).GetMethod("SetAdaptedValue", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly FieldInfo PSVariableAssignmentBinder__mutableValueWithInstanceMemberVersion = typeof(PSVariableAssignmentBinder).GetField("_mutableValueWithInstanceMemberVersion", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo PSVariableAssignmentBinder_CopyInstanceMembersOfValueType = typeof(PSVariableAssignmentBinder).GetMethod("CopyInstanceMembersOfValueType", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly ConstructorInfo RangeEnumerator_ctor = typeof(RangeEnumerator).GetConstructor(new Type[] { typeof(int), typeof(int) });
        internal static readonly MethodInfo ReservedNameMembers_GeneratePSAdaptedMemberSet = typeof(ReservedNameMembers).GetMethod("GeneratePSAdaptedMemberSet", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ReservedNameMembers_GeneratePSBaseMemberSet = typeof(ReservedNameMembers).GetMethod("GeneratePSBaseMemberSet", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ReservedNameMembers_GeneratePSExtendedMemberSet = typeof(ReservedNameMembers).GetMethod("GeneratePSExtendedMemberSet", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ReservedNameMembers_GeneratePSObjectMemberSet = typeof(ReservedNameMembers).GetMethod("GeneratePSObjectMemberSet", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo ReservedNameMembers_PSTypeNames = typeof(ReservedNameMembers).GetMethod("PSTypeNames");
        internal static readonly MethodInfo RestrictedLanguageChecker_CheckDataStatementAstAtRuntime = typeof(RestrictedLanguageChecker).GetMethod("CheckDataStatementAstAtRuntime", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly ConstructorInfo ReturnException_ctor = typeof(ReturnException).GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null, CallingConventions.Standard, new Type[] { typeof(object) }, null);
        internal static readonly PropertyInfo RuntimeException_ErrorRecord = typeof(RuntimeException).GetProperty("ErrorRecord");
        internal static readonly MethodInfo ScriptBlock_DoInvokeReturnAsIs = typeof(ScriptBlock).GetMethod("DoInvokeReturnAsIs", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo ScriptBlock_InvokeAsDelegateHelper = typeof(ScriptBlock).GetMethod("InvokeAsDelegateHelper", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly MethodInfo ScriptBlockExpressionWrapper_GetScriptBlock = typeof(ScriptBlockExpressionWrapper).GetMethod("GetScriptBlock", BindingFlags.NonPublic | BindingFlags.Instance);
        internal static readonly ConstructorInfo SetValueException_ctor = typeof(SetValueException).GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null, new Type[] { typeof(string), typeof(Exception), typeof(string), typeof(object[]) }, null);
        internal const BindingFlags staticFlags = (BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly ConstructorInfo StreamReader_ctor = typeof(StreamReader).GetConstructor(new Type[] { typeof(string) });
        internal static readonly MethodInfo StreamReader_ReadLine = typeof(StreamReader).GetMethod("ReadLine");
        internal static readonly MethodInfo String_Compare = typeof(string).GetMethod("Compare", BindingFlags.Public | BindingFlags.Static, null, CallingConventions.Standard, new Type[] { typeof(string), typeof(string), typeof(StringComparison) }, null);
        internal static readonly MethodInfo String_Concat_String = typeof(string).GetMethod("Concat", BindingFlags.Public | BindingFlags.Static, null, CallingConventions.Standard, new Type[] { typeof(string), typeof(string) }, null);
        internal static readonly ConstructorInfo String_ctor_char_int = typeof(string).GetConstructor(new Type[] { typeof(char), typeof(int) });
        internal static readonly MethodInfo String_Equals = typeof(string).GetMethod("Equals", BindingFlags.Public | BindingFlags.Static, null, CallingConventions.Standard, new Type[] { typeof(string), typeof(string), typeof(StringComparison) }, null);
        internal static readonly MethodInfo String_get_Chars = typeof(string).GetMethod("get_Chars");
        internal static readonly PropertyInfo String_Length = typeof(string).GetProperty("Length");
        internal static readonly MethodInfo StringOps_FormatOperator = typeof(StringOps).GetMethod("FormatOperator", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo StringOps_Multiply = typeof(StringOps).GetMethod("Multiply", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo SwitchOps_ConditionSatisfiedRegex = typeof(SwitchOps).GetMethod("ConditionSatisfiedRegex", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo SwitchOps_ConditionSatisfiedWildcard = typeof(SwitchOps).GetMethod("ConditionSatisfiedWildcard", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo SwitchOps_ResolveFilePath = typeof(SwitchOps).GetMethod("ResolveFilePath", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo TypeOps_AsOperator = typeof(TypeOps).GetMethod("AsOperator", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo TypeOps_IsInstance = typeof(TypeOps).GetMethod("IsInstance", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo TypeOps_ResolveTypeName = typeof(TypeOps).GetMethod("ResolveTypeName", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo VariableOps_GetAutomaticVariableValue = typeof(VariableOps).GetMethod("GetAutomaticVariableValue", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo VariableOps_GetUsingValue = typeof(VariableOps).GetMethod("GetUsingValue", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo VariableOps_GetVariableAsRef = typeof(VariableOps).GetMethod("GetVariableAsRef", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo VariableOps_GetVariableValue = typeof(VariableOps).GetMethod("GetVariableValue", BindingFlags.NonPublic | BindingFlags.Static);
        internal static readonly MethodInfo VariableOps_SetVariableValue = typeof(VariableOps).GetMethod("SetVariableValue", BindingFlags.NonPublic | BindingFlags.Static);
    }
}

