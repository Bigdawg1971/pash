//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.WSMan.Management {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class WsManResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal WsManResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.WSMan.Management.WsManResources", typeof(WsManResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A {0} cannot be specified when {1} is specified..
        /// </summary>
        public static string AmbiguosAuthentication {
            get {
                return ResourceManager.GetString("AmbiguosAuthentication", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RunAsPassword value cannot be removed. Remove the values for RunAsUser and RunAsPassword in PowerShell by calling the Clear-Item cmdlet with the value for -Path attribute equal to the value of RunAsUser..
        /// </summary>
        public static string ClearItemOnRunAsPassword {
            get {
                return ResourceManager.GetString("ClearItemOnRunAsPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This PowerShell cmdlet is not available on for Windows XP and Windows Server 2003..
        /// </summary>
        public static string CmdletNotAvailable {
            get {
                return ResourceManager.GetString("CmdletNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Root of WsMan Config Storage..
        /// </summary>
        public static string ConfigStorage {
            get {
                return ResourceManager.GetString("ConfigStorage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used from the current path. Move to root path of the provider using cd\ and run your command again..
        /// </summary>
        public static string ConnectFailure {
            get {
                return ResourceManager.GetString("ConnectFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} parameter is mandatory when the {1} parameter value is {2}..
        /// </summary>
        public static string CredSSPClientAndDelegateMustBeSpecified {
            get {
                return ResourceManager.GetString("CredSSPClientAndDelegateMustBeSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CredSSP Authentication Configuration for WS-Management.
        /// </summary>
        public static string CredSSPContinueCaption {
            get {
                return ResourceManager.GetString("CredSSPContinueCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CredSSP authentication allows the user credentials on this computer to be sent to a remote computer. If you use CredSSP authentication for a connection to a malicious or compromised computer, that computer will have access to your user name and password. For more information, see the Enable-WSManCredSSP Help topic.
        ///Do you want to enable CredSSP authentication?.
        /// </summary>
        public static string CredSSPContinueQuery {
            get {
                return ResourceManager.GetString("CredSSPContinueQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} parameter cannot be used when the {1} parameter value is {2}. The {0} parameter can be used only when the {1} parameter value is {3}..
        /// </summary>
        public static string CredSSPRoleAndDelegateCannotBeSpecified {
            get {
                return ResourceManager.GetString("CredSSPRoleAndDelegateCannotBeSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CredSSP authentication allows the server to accept user credentials from a remote computer. If you enable CredSSP authentication on the server, the server will have access to the user name and password of the client computer if the client computer sends them. For more information, see the Enable-WSManCredSSP Help topic. 
        ///Do you want to enable CredSSP authentication?.
        /// </summary>
        public static string CredSSPServerContinueQuery {
            get {
                return ResourceManager.GetString("CredSSPServerContinueQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This computer is configured to receive credentials from a remote client computer..
        /// </summary>
        public static string CredSSPServiceConfigured {
            get {
                return ResourceManager.GetString("CredSSPServiceConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This computer is not configured to receive credentials from a remote client computer..
        /// </summary>
        public static string CredSSPServiceNotConfigured {
            get {
                return ResourceManager.GetString("CredSSPServiceNotConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The machine is configured to allow delegating fresh credentials to the following target(s): .
        /// </summary>
        public static string DelegateFreshCred {
            get {
                return ResourceManager.GetString("DelegateFreshCred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This Windows PowerShell snap-in contains cmdlets (such as Get-WSManInstance and Set-WSManInstance) that are used by the Windows PowerShell host to manage WSMan operations..
        /// </summary>
        public static string Description {
            get {
                return ResourceManager.GetString("Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be executed because the setting cannot be disabled..
        /// </summary>
        public static string DisableCredSSPPolicyValidateError {
            get {
                return ResourceManager.GetString("DisableCredSSPPolicyValidateError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used from the current path. Move to root path of the provider using cd\ and run your command again..
        /// </summary>
        public static string DisconnectFailure {
            get {
                return ResourceManager.GetString("DisconnectFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used because WsMan drive root is not supported on this version of Windows OS..
        /// </summary>
        public static string DriveRootError {
            get {
                return ResourceManager.GetString("DriveRootError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be executed because the setting cannot be enabled..
        /// </summary>
        public static string EnableCredSSPPolicyValidateError {
            get {
                return ResourceManager.GetString("EnableCredSSPPolicyValidateError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access is denied. You need to run this cmdlet from an elevated process..
        /// </summary>
        public static string ErrorElevationNeeded {
            get {
                return ResourceManager.GetString("ErrorElevationNeeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WinRM client cannot complete the operation.Check if the computer name is valid..
        /// </summary>
        public static string InvalidComputerName {
            get {
                return ResourceManager.GetString("InvalidComputerName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used because file does not exist.Check the file existence and run your command..
        /// </summary>
        public static string InvalidFileName {
            get {
                return ResourceManager.GetString("InvalidFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used because root path does not exist.Check the root path and run your command..
        /// </summary>
        public static string InvalidPath {
            get {
                return ResourceManager.GetString("InvalidPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used because the parameter value type is invalid. {0} configuration expects a value of Type {1}. Verify that the value is correct and try again..
        /// </summary>
        public static string InvalidValueType {
            get {
                return ResourceManager.GetString("InvalidValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used because path does not exist.Check the path existence and run your command..
        /// </summary>
        public static string ItemDoesNotExist {
            get {
                return ResourceManager.GetString("ItemDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used to remove the computer &apos;localhost&apos; because it will always be connected. Give some other connected computer and run your command..
        /// </summary>
        public static string LocalHost {
            get {
                return ResourceManager.GetString("LocalHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used because the parameter matches multiple properties on the ResourceURI.Check the input parameters and run your command..
        /// </summary>
        public static string MultipleResourceMatch {
            get {
                return ResourceManager.GetString("MultipleResourceMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to create a drive with the specified root. The root path does not exist..
        /// </summary>
        public static string NewDriveRootDoesNotExist {
            get {
                return ResourceManager.GetString("NewDriveRootDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used in the current path because New-Item is not supported at this level of Provider path..
        /// </summary>
        public static string NewItemNotSupported {
            get {
                return ResourceManager.GetString("NewItemNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a new ClientCertificate item..
        /// </summary>
        public static string NewItemShouldContinueClientCertCaption {
            get {
                return ResourceManager.GetString("NewItemShouldContinueClientCertCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command creates a new ClientCertificate item.
        ///
        ///Do you want to continue?.
        /// </summary>
        public static string NewItemShouldContinueClientCertQuery {
            get {
                return ResourceManager.GetString("NewItemShouldContinueClientCertQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a new Listener item..
        /// </summary>
        public static string NewItemShouldContinueListenerCaption {
            get {
                return ResourceManager.GetString("NewItemShouldContinueListenerCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command creates a new Listener item.
        ///
        ///Do you want to continue?.
        /// </summary>
        public static string NewItemShouldContinueListenerQuery {
            get {
                return ResourceManager.GetString("NewItemShouldContinueListenerQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used without Basic or Digest authentication algorithm because credentials are specified.Use Basic or Digest authentication algorithm and run your command..
        /// </summary>
        public static string NewWSManSessionOptionAuth {
            get {
                return ResourceManager.GetString("NewWSManSessionOptionAuth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used without credential because the authentication algorithm is Basic or Digest. Use Credentials parameter to specify value and run your command..
        /// </summary>
        public static string NewWSManSessionOptionCred {
            get {
                return ResourceManager.GetString("NewWSManSessionOptionCred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used because the parameter matches a non-text property on the ResourceURI.Check the input parameters and run your command..
        /// </summary>
        public static string NoAttributeMatch {
            get {
                return ResourceManager.GetString("NoAttributeMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot set the input value because these values are Primary keys or Container items of the resource object. Change the input value and Run your command..
        /// </summary>
        public static string NoChangeValue {
            get {
                return ResourceManager.GetString("NoChangeValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The machine is not configured to allow delegating fresh credentials. .
        /// </summary>
        public static string NoDelegateFreshCred {
            get {
                return ResourceManager.GetString("NoDelegateFreshCred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used because the parameter does not match any properties on the ResourceURI.Check the input parameters and run your command..
        /// </summary>
        public static string NoResourceMatch {
            get {
                return ResourceManager.GetString("NoResourceMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be executed because the Connection URI is not in correct format. Please check the connection uri and Run your command again..
        /// </summary>
        public static string NotProperURI {
            get {
                return ResourceManager.GetString("NotProperURI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WinRM Quick Configuration.
        /// </summary>
        public static string QuickConfigContinueCaption {
            get {
                return ResourceManager.GetString("QuickConfigContinueCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Running the Set-WSManQuickConfig command has significant security implications, as it enables remote management through the WinRM service on this computer.
        ///This command:
        ///	1. Checks whether the WinRM service is running. If the WinRM service is not running, the service is started.
        ///	2. Sets the WinRM service startup type to automatic.
        ///	3. Creates a listener to accept requests on any IP address. By default, the transport is HTTP.
        ///	4. Enables a firewall exception for WS-Management traffic.
        ///	5. Enables Kerberos a [rest of string was truncated]&quot;;.
        /// </summary>
        public static string QuickConfigContinueQuery {
            get {
                return ResourceManager.GetString("QuickConfigContinueQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used in the current path because Remove-Item is not supported at this level of Provider path..
        /// </summary>
        public static string RemoveItemNotSupported {
            get {
                return ResourceManager.GetString("RemoveItemNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find value for &quot;{0}&quot; element in the path {1}..
        /// </summary>
        public static string ResourceURIMissingInResourceDir {
            get {
                return ResourceManager.GetString("ResourceURIMissingInResourceDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WinRM Security Configuration..
        /// </summary>
        public static string SetItemGeneralSecurityCaption {
            get {
                return ResourceManager.GetString("SetItemGeneralSecurityCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used in the current path because this cmdlet is not supported at this level of Provider path..
        /// </summary>
        public static string SetItemNotSupported {
            get {
                return ResourceManager.GetString("SetItemNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value for RunAsPassword cannot be set without a value set for RunAsUser. Set the value for both RunAsUser and RunAsPassword in Powershell by calling the Set-Item cmdlet with the value for -Path attribute equal to the value of RunAsUser..
        /// </summary>
        public static string SetItemOnRunAsPasswordNoRunAsUser {
            get {
                return ResourceManager.GetString("SetItemOnRunAsPasswordNoRunAsUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command modifies the RootSDDL setting for the WinRM service.  The RootSDDL stores the default security settings for any WinRM securable resource that does not specify its own SDDL. Changing the SDDL might affect security for many WinRM resources. Are you sure that you want to modify these default settings?.
        /// </summary>
        public static string SetItemRootSDDLWarningQuery {
            get {
                return ResourceManager.GetString("SetItemRootSDDLWarningQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configuration changes you made will only be effective after the WinRM service is restarted.  To restart the WinRM service, run the following command: &apos;Restart-Service winrm&apos;.
        /// </summary>
        public static string SetItemServiceRestartWarning {
            get {
                return ResourceManager.GetString("SetItemServiceRestartWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configuration changes you made will only be effective after the WinRM service is restarted on {0}..
        /// </summary>
        public static string SetItemServiceRestartWarningRemote {
            get {
                return ResourceManager.GetString("SetItemServiceRestartWarningRemote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the value of the item.
        /// </summary>
        public static string SetItemShouldContinueCaption {
            get {
                return ResourceManager.GetString("SetItemShouldContinueCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command set the value of the Item.
        ///
        ///Do you want to continue?.
        /// </summary>
        public static string SetItemShouldContinueQuery {
            get {
                return ResourceManager.GetString("SetItemShouldContinueQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command modifies the TrustedHosts list for the WinRM client. The computers in the TrustedHosts list might not be authenticated. The client might send credential information to these computers. Are you sure that you want to modify this list?.
        /// </summary>
        public static string SetItemTrustedHostsWarningQuery {
            get {
                return ResourceManager.GetString("SetItemTrustedHostsWarningQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The updated configuration is effective only if it is less than or equal to the value of global quota {0}. Verify the value for the global quota using the PowerShell cmdlet &quot;Get-Item {0}&quot;..
        /// </summary>
        public static string SetItemWarnigForPPQ {
            get {
                return ResourceManager.GetString("SetItemWarnigForPPQ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The updated configuration might affect the operation of the plugins having a per plugin quota value greater than {0}. Verify the configuration of all the registered plugins and change the per plugin quota values for the affected plugins..
        /// </summary>
        public static string SetItemWarningForGlobalQuota {
            get {
                return ResourceManager.GetString("SetItemWarningForGlobalQuota", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;Set-Item&quot; on the WinRM configuration setting &quot;{0}&quot; to update the value to &quot;{1}&quot;.
        /// </summary>
        public static string SetItemWhatIfAndConfirmText {
            get {
                return ResourceManager.GetString("SetItemWhatIfAndConfirmText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security Configuration for WinRM Plug-in..
        /// </summary>
        public static string ShouldContinueSecurityCaption {
            get {
                return ResourceManager.GetString("ShouldContinueSecurityCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command modifies the security settings on a resource in the following WinRM plug-in: {0}.
        ///Do you want to continue?.
        /// </summary>
        public static string ShouldContinueSecurityQuery {
            get {
                return ResourceManager.GetString("ShouldContinueSecurityQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert &apos;System.Object[]&apos; to the type &apos;System.String&apos; required by the parameter. Specified method is not supported..
        /// </summary>
        public static string TrustedHostValueTypeError {
            get {
                return ResourceManager.GetString("TrustedHostValueTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used because Parameter Value is not supplied. Check the value again and run your command..
        /// </summary>
        public static string value {
            get {
                return ResourceManager.GetString("value", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft.
        /// </summary>
        public static string Vendor {
            get {
                return ResourceManager.GetString("Vendor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be used because the configuration is corrupted. Run WinRM invoke Restore WinRM/config to restore the default configuration.
        /// </summary>
        public static string WinrmNotConfigured {
            get {
                return ResourceManager.GetString("WinrmNotConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command cannot be executed because the WinRM Service is not started..
        /// </summary>
        public static string WinRMServiceError {
            get {
                return ResourceManager.GetString("WinRMServiceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start WinRM Service.
        /// </summary>
        public static string WSManServiceStartCaption {
            get {
                return ResourceManager.GetString("WSManServiceStartCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WinRM service is not started currently. Running this command will start the WinRM service.
        ///
        ///Do you want to continue?.
        /// </summary>
        public static string WSManServiceStartQuery {
            get {
                return ResourceManager.GetString("WSManServiceStartQuery", resourceCulture);
            }
        }
    }
}
