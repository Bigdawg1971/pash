<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LoadFile_ConfigFileMissing" xml:space="preserve">
    <value>The authorization rules configuration file {0} is missing. Windows PowerShell Web Access requires this file. If you do not have a backup, you might need to uninstall and then reinstall Windows PowerShell Web Access.</value>
  </data>
  <data name="UserTypeDoesNotMatchUserGroup" xml:space="preserve">
    <value>The specified user group refers to an account that is not of the correct type. The name must refer to a user group.</value>
  </data>
  <data name="InvalidUserAndGroupNameFormat" xml:space="preserve">
    <value>The specified name for the user or user group is not valid. The correct format is "domain\user".</value>
  </data>
  <data name="LoadFile_RuleFileMissing" xml:space="preserve">
    <value>The authorization rules file {0} is missing. Windows PowerShell Web Access requires this file. If you do not have a backup, you might need to uninstall and then reinstall Windows PowerShell Web Access. </value>
  </data>
  <data name="AuthorizationRuleName_Format" xml:space="preserve">
    <value>Rule {0}</value>
  </data>
  <data name="CannotFindComputer" xml:space="preserve">
    <value>The command cannot find computer {0} in DNS entries. Verify that the computer name is correct.</value>
  </data>
  <data name="LoadFile_ConfigFileBad" xml:space="preserve">
    <value>The {0} file has been corrupted. {1}
Windows PowerShell Web Access will save the file as {2} and create a new configuration file at {3}. 
You must re-create any configuration changes you made in the new file.</value>
  </data>
  <data name="ComputerGroupIsNotSecurityGroup" xml:space="preserve">
    <value>The specified computer group refers to an account that is not a security group. Non-security groups, such as distribution lists, cannot be used to create authentication rules.</value>
  </data>
  <data name="SaveFileFailed" xml:space="preserve">
    <value>The authorization rule file could not be modified. </value>
  </data>
  <data name="NoActiveDirectoryPermission" xml:space="preserve">
    <value>This command must be run by a user account with permissions to perform Active Directory queries.</value>
  </data>
  <data name="DestinationTypeDoesNotMatchComputer" xml:space="preserve">
    <value>The specified computer refers to an account that is not of the correct type. The name must refer to a computer.</value>
  </data>
  <data name="UserGroupIsNotSecurityGroup" xml:space="preserve">
    <value>The specified user group refers to an account that is not a security group. Non-security groups, such as distribution lists, cannot be used to create authentication rules.</value>
  </data>
  <data name="ErrorKey" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="AuthorizationRuleFile_WarningComment" xml:space="preserve">
    <value>Do not edit this file directly or manually.  This file is generated when you change Windows PowerShell Web Access authorization rules by using the authorization rule cmdlets.  Editing this file manually can cause file corruption and loss of data. </value>
  </data>
  <data name="SidToAccountConvertError" xml:space="preserve">
    <value>The command is unable to convert the SID to an account name: {0}</value>
  </data>
  <data name="UserTypeDoesNotMatchUser" xml:space="preserve">
    <value>The specified user refers to an account that is not of the correct type. The name must refer to a user.</value>
  </data>
  <data name="AccountToSidConvertError" xml:space="preserve">
    <value>The command cannot obtain the security identifier (SID) for account name '{0}'. Verify that the account name is correct.</value>
  </data>
  <data name="AccountToSidConvertExtendedError" xml:space="preserve">
    <value>The command cannot obtain the security identifier for account name '{0}'. Error details: {1}</value>
  </data>
  <data name="DestinationTypeDoesNotMatchComputerGroup" xml:space="preserve">
    <value>The specified computer group refers to an account that is not of the correct type. The name must refer to a computer group.</value>
  </data>
  <data name="LoadFile_ConfigFileMissingAuthorizationFile" xml:space="preserve">
    <value>Cannot find element {0} in file {1}.</value>
  </data>
  <data name="LoadFile_RuleFileBad" xml:space="preserve">
    <value>The {0} file has been corrupted. {1}
Windows PowerShell Web Access will save the file as {2} and create a new authorization rules file at {3}. 
Because the authorization rules in the corrupted file are no longer usable, you must re-create any authorization rules that you want to use in the new file by using the authorization rule cmdlets.</value>
  </data>
  <data name="InvalidComputerNameFormat" xml:space="preserve">
    <value>The specified computer name format is not valid. Verify that the computer name is formatted as a fully-qualified domain name (FQDN).</value>
  </data>
</root>